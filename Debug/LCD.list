
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003300  08003300  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003300  08003300  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003300  08003300  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003378  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003378  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009758  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a13  00000000  00000000  000297f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000173cd  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085b9  00000000  00000000  00043545  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008313b  00000000  00000000  0004bafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cec39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002278  00000000  00000000  000cecb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031ac 	.word	0x080031ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031ac 	.word	0x080031ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b38      	ldr	r3, [pc, #224]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a37      	ldr	r2, [pc, #220]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b35      	ldr	r3, [pc, #212]	; (8000254 <MX_GPIO_Init+0xf8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b32      	ldr	r3, [pc, #200]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a31      	ldr	r2, [pc, #196]	; (8000254 <MX_GPIO_Init+0xf8>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <MX_GPIO_Init+0xf8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a2b      	ldr	r2, [pc, #172]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b29      	ldr	r3, [pc, #164]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b26      	ldr	r3, [pc, #152]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a25      	ldr	r2, [pc, #148]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <MX_GPIO_Init+0xf8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001d8:	f000 fd89 	bl	8000cee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 80001dc:	2200      	movs	r2, #0
 80001de:	21ff      	movs	r1, #255	; 0xff
 80001e0:	481e      	ldr	r0, [pc, #120]	; (800025c <MX_GPIO_Init+0x100>)
 80001e2:	f000 fd84 	bl	8000cee <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f240 4103 	movw	r1, #1027	; 0x403
 80001ec:	481c      	ldr	r0, [pc, #112]	; (8000260 <MX_GPIO_Init+0x104>)
 80001ee:	f000 fd7e 	bl	8000cee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <MX_GPIO_Init+0xfc>)
 800020c:	f000 fbfe 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8000210:	23ff      	movs	r3, #255	; 0xff
 8000212:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	480d      	ldr	r0, [pc, #52]	; (800025c <MX_GPIO_Init+0x100>)
 8000228:	f000 fbf0 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin;
 800022c:	f240 4303 	movw	r3, #1027	; 0x403
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000232:	2301      	movs	r3, #1
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023a:	2302      	movs	r3, #2
 800023c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	4619      	mov	r1, r3
 8000244:	4806      	ldr	r0, [pc, #24]	; (8000260 <MX_GPIO_Init+0x104>)
 8000246:	f000 fbe1 	bl	8000a0c <HAL_GPIO_Init>

}
 800024a:	bf00      	nop
 800024c:	3720      	adds	r7, #32
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00

08000264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <MX_I2C1_Init+0x50>)
 800026a:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <MX_I2C1_Init+0x54>)
 800026c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_I2C1_Init+0x58>)
 8000272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_I2C1_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <MX_I2C1_Init+0x50>)
 80002a2:	f000 fd55 	bl	8000d50 <HAL_I2C_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002ac:	f000 f986 	bl	80005bc <Error_Handler>
  }

}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000098 	.word	0x20000098
 80002b8:	40005400 	.word	0x40005400
 80002bc:	000186a0 	.word	0x000186a0

080002c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c8:	f107 0310 	add.w	r3, r7, #16
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a15      	ldr	r2, [pc, #84]	; (8000330 <HAL_I2C_MspInit+0x70>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d123      	bne.n	8000328 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <HAL_I2C_MspInit+0x74>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a13      	ldr	r2, [pc, #76]	; (8000334 <HAL_I2C_MspInit+0x74>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <HAL_I2C_MspInit+0x74>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80002f8:	23c0      	movs	r3, #192	; 0xc0
 80002fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002fc:	2312      	movs	r3, #18
 80002fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000300:	2303      	movs	r3, #3
 8000302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <HAL_I2C_MspInit+0x78>)
 800030c:	f000 fb7e 	bl	8000a0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <HAL_I2C_MspInit+0x74>)
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_I2C_MspInit+0x74>)
 8000316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800031a:	61d3      	str	r3, [r2, #28]
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <HAL_I2C_MspInit+0x74>)
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40005400 	.word	0x40005400
 8000334:	40021000 	.word	0x40021000
 8000338:	40010c00 	.word	0x40010c00

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033e:	b0c3      	sub	sp, #268	; 0x10c
 8000340:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000342:	f000 f9fb 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000346:	f000 f8ff 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034a:	f7ff ff07 	bl	800015c <MX_GPIO_Init>
  MX_I2C1_Init();
 800034e:	f7ff ff89 	bl	8000264 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  int a = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  	  	  	  	  	  	  	  	  /* CREATING LCD HANDLE THROUGH GPIO */

	LCD_GPIO_t lcd_gpio;

  	GPIO_TypeDef * data_ports[] = { LCD_D0_GPIO_Port, LCD_D1_GPIO_Port, LCD_D2_GPIO_Port, LCD_D3_GPIO_Port,
 8000358:	4b73      	ldr	r3, [pc, #460]	; (8000528 <main+0x1ec>)
 800035a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800035e:	461d      	mov	r5, r3
 8000360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000364:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   								    LCD_D4_GPIO_Port, LCD_D5_GPIO_Port, LCD_D6_GPIO_Port, LCD_D7_GPIO_Port };

//  GPIO_TypeDef * data_ports[] = {LCD_D4_GPIO_Port, LCD_D5_GPIO_Port, LCD_D6_GPIO_Port, LCD_D7_GPIO_Port}; /* For 4-bits operations */

  	LCD_GPIO_Ports_t ports = { LCD_RS_GPIO_Port, LCD_RW_GPIO_Port, LCD_EN_GPIO_Port}; // Filling the port structure handle
 800036c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000370:	222c      	movs	r2, #44	; 0x2c
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f002 faff 	bl	8002978 <memset>
 800037a:	4b6c      	ldr	r3, [pc, #432]	; (800052c <main+0x1f0>)
 800037c:	63bb      	str	r3, [r7, #56]	; 0x38
 800037e:	4b6b      	ldr	r3, [pc, #428]	; (800052c <main+0x1f0>)
 8000380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000382:	4b6a      	ldr	r3, [pc, #424]	; (800052c <main+0x1f0>)
 8000384:	643b      	str	r3, [r7, #64]	; 0x40

    memcpy(ports.data_ports, data_ports, sizeof data_ports); // Concatenating data ports with RS, RW and EN ports
 8000386:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800038a:	f107 0564 	add.w	r5, r7, #100	; 0x64
 800038e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000392:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000396:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  	uint16_t data_pins[] = { LCD_D0_Pin, LCD_D1_Pin, LCD_D2_Pin, LCD_D3_Pin,
 800039a:	4b65      	ldr	r3, [pc, #404]	; (8000530 <main+0x1f4>)
 800039c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80003a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  						     LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin };

//  uint16_t data_pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin}; /* For 4-bits operations */

  	LCD_GPIO_Pins_t pins = { LCD_RS_Pin, LCD_RW_Pin, LCD_EN_Pin}; // Filling the pin structure handle
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]
 80003b6:	829a      	strh	r2, [r3, #20]
 80003b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003bc:	823b      	strh	r3, [r7, #16]
 80003be:	2302      	movs	r3, #2
 80003c0:	827b      	strh	r3, [r7, #18]
 80003c2:	2301      	movs	r3, #1
 80003c4:	82bb      	strh	r3, [r7, #20]

    memcpy(pins.data_pins, data_pins, sizeof data_pins); // Concatenating data pins with RS, RW and EN pins
 80003c6:	f107 0416 	add.w	r4, r7, #22
 80003ca:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80003ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d0:	6020      	str	r0, [r4, #0]
 80003d2:	6061      	str	r1, [r4, #4]
 80003d4:	60a2      	str	r2, [r4, #8]
 80003d6:	60e3      	str	r3, [r4, #12]

	LCD_GPIO_Constructor(&lcd_gpio, ports, pins);
 80003d8:	f107 0684 	add.w	r6, r7, #132	; 0x84
 80003dc:	ac08      	add	r4, sp, #32
 80003de:	f107 0510 	add.w	r5, r7, #16
 80003e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003ea:	6020      	str	r0, [r4, #0]
 80003ec:	3404      	adds	r4, #4
 80003ee:	8021      	strh	r1, [r4, #0]
 80003f0:	466d      	mov	r5, sp
 80003f2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80003f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000402:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000408:	4630      	mov	r0, r6
 800040a:	f002 f88b 	bl	8002524 <LCD_GPIO_Constructor>

	LCD_PrintString(&lcd_gpio.super,"HELLO WORLD");
 800040e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000412:	4948      	ldr	r1, [pc, #288]	; (8000534 <main+0x1f8>)
 8000414:	4618      	mov	r0, r3
 8000416:	f001 fe2f 	bl	8002078 <LCD_PrintString>
	LCD_GoTo(&lcd_gpio.super, 1, 10);
 800041a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800041e:	220a      	movs	r2, #10
 8000420:	2101      	movs	r1, #1
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fe57 	bl	80020d6 <LCD_GoTo>
	LCD_PrintNumber(&lcd_gpio.super, 1234, 10);
 8000428:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800042c:	220a      	movs	r2, #10
 800042e:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fe2e 	bl	8002094 <LCD_PrintNumber>
	LCD_GoTo(&lcd_gpio.super, 0, 8);
 8000438:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800043c:	2208      	movs	r2, #8
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fe48 	bl	80020d6 <LCD_GoTo>
	LCD_PrintString(&lcd_gpio.super, "KAKAb");
 8000446:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800044a:	493b      	ldr	r1, [pc, #236]	; (8000538 <main+0x1fc>)
 800044c:	4618      	mov	r0, r3
 800044e:	f001 fe13 	bl	8002078 <LCD_PrintString>
	LCD_GoTo(&lcd_gpio.super, 1, 1);
 8000452:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000456:	2201      	movs	r2, #1
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fe3b 	bl	80020d6 <LCD_GoTo>
	LCD_PrintString(&lcd_gpio.super, "Yilmazza");
 8000460:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000464:	4935      	ldr	r1, [pc, #212]	; (800053c <main+0x200>)
 8000466:	4618      	mov	r0, r3
 8000468:	f001 fe06 	bl	8002078 <LCD_PrintString>
    							/* CREATING LCD HANDLE THROUGH I2C BUS */


	LCD_I2C_t lcd_i2c;

	LCD_I2C_Constructor(&lcd_i2c, &hi2c1, SLAVE_ADDR);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	224e      	movs	r2, #78	; 0x4e
 8000470:	4933      	ldr	r1, [pc, #204]	; (8000540 <main+0x204>)
 8000472:	4618      	mov	r0, r3
 8000474:	f002 f9ea 	bl	800284c <LCD_I2C_Constructor>

	LCD_PrintString(&lcd_i2c.super, "HELLO WORLD");
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	492e      	ldr	r1, [pc, #184]	; (8000534 <main+0x1f8>)
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fdfb 	bl	8002078 <LCD_PrintString>
	LCD_GoTo(&lcd_i2c.super, 1, 5);
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2205      	movs	r2, #5
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f001 fe24 	bl	80020d6 <LCD_GoTo>
	LCD_PrintNumber(&lcd_i2c.super, 44453356, 10);
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	220a      	movs	r2, #10
 8000492:	492c      	ldr	r1, [pc, #176]	; (8000544 <main+0x208>)
 8000494:	4618      	mov	r0, r3
 8000496:	f001 fdfd 	bl	8002094 <LCD_PrintNumber>

	HAL_Delay(1000);
 800049a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049e:	f000 f9af 	bl	8000800 <HAL_Delay>
	LCD_Clear(&lcd_gpio.super);
 80004a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fe44 	bl	8002134 <LCD_Clear>
	HAL_Delay(1000);
 80004ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b0:	f000 f9a6 	bl	8000800 <HAL_Delay>
	LCD_Clear(&lcd_i2c.super);
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fe3c 	bl	8002134 <LCD_Clear>
	HAL_Delay(1000);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f000 f99e 	bl	8000800 <HAL_Delay>

	LCD_ReturnHome(&lcd_gpio.super);
 80004c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fe27 	bl	800211c <LCD_ReturnHome>
	LCD_ReturnHome(&lcd_i2c.super);
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fe23 	bl	800211c <LCD_ReturnHome>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	LCD_PrintNumber(&lcd_gpio.super, a, 10);
 80004d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80004da:	220a      	movs	r2, #10
 80004dc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fdd7 	bl	8002094 <LCD_PrintNumber>
	LCD_PrintNumber(&lcd_i2c.super, a, 10);
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	220a      	movs	r2, #10
 80004ea:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fdd0 	bl	8002094 <LCD_PrintNumber>

	HAL_Delay(1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	f000 f982 	bl	8000800 <HAL_Delay>

	a++;
 80004fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000500:	3301      	adds	r3, #1
 8000502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if( a > 100) a = 0;
 8000506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800050a:	2b64      	cmp	r3, #100	; 0x64
 800050c:	dd02      	ble.n	8000514 <main+0x1d8>
 800050e:	2300      	movs	r3, #0
 8000510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	LCD_ReturnHome(&lcd_gpio.super);
 8000514:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000518:	4618      	mov	r0, r3
 800051a:	f001 fdff 	bl	800211c <LCD_ReturnHome>
	LCD_ReturnHome(&lcd_i2c.super);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fdfb 	bl	800211c <LCD_ReturnHome>
	LCD_PrintNumber(&lcd_gpio.super, a, 10);
 8000526:	e7d6      	b.n	80004d6 <main+0x19a>
 8000528:	080031e4 	.word	0x080031e4
 800052c:	40010c00 	.word	0x40010c00
 8000530:	08003204 	.word	0x08003204
 8000534:	080031c4 	.word	0x080031c4
 8000538:	080031d0 	.word	0x080031d0
 800053c:	080031d8 	.word	0x080031d8
 8000540:	20000098 	.word	0x20000098
 8000544:	02a64dec 	.word	0x02a64dec

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b090      	sub	sp, #64	; 0x40
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fa0e 	bl	8002978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	4618      	mov	r0, r3
 800057e:	f001 f953 	bl	8001828 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000588:	f000 f818 	bl	80005bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fbbf 	bl	8001d28 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005b0:	f000 f804 	bl	80005bc <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3740      	adds	r7, #64	; 0x40
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <Error_Handler+0x6>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_MspInit+0x5c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_MspInit+0x5c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x60>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x60>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler+0x4>

0800063a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <UsageFault_Handler+0x4>

08000646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066e:	f000 f8ab 	bl	80007c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f002 f93c 	bl	8002924 <__errno>
 80006ac:	4602      	mov	r2, r0
 80006ae:	230c      	movs	r3, #12
 80006b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20005000 	.word	0x20005000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	200000f8 	.word	0x200000f8

080006e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006f2:	e003      	b.n	80006fc <LoopCopyDataInit>

080006f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006fa:	3104      	adds	r1, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000700:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000702:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000704:	d3f6      	bcc.n	80006f4 <CopyDataInit>
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000708:	e002      	b.n	8000710 <LoopFillZerobss>

0800070a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800070c:	f842 3b04 	str.w	r3, [r2], #4

08000710 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000712:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000714:	d3f9      	bcc.n	800070a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000716:	f7ff ffe5 	bl	80006e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f002 f909 	bl	8002930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fe0d 	bl	800033c <main>
  bx lr
 8000722:	4770      	bx	lr
  ldr r3, =_sidata
 8000724:	08003308 	.word	0x08003308
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800072c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000730:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000734:	200000f4 	.word	0x200000f4

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x28>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x28>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f929 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 f808 	bl	8000768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff ff34 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x54>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x58>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000782:	fbb2 f3f3 	udiv	r3, r2, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f933 	bl	80009f2 <HAL_SYSTICK_Config>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e00e      	b.n	80007b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d80a      	bhi.n	80007b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f000 f909 	bl	80009ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <HAL_InitTick+0x5c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e000      	b.n	80007b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x1c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x20>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <HAL_IncTick+0x20>)
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000008 	.word	0x20000008
 80007e8:	200000ec 	.word	0x200000ec

080007ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <HAL_GetTick+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200000ec 	.word	0x200000ec

08000800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000808:	f7ff fff0 	bl	80007ec <HAL_GetTick>
 800080c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000818:	d005      	beq.n	8000826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_Delay+0x40>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000826:	bf00      	nop
 8000828:	f7ff ffe0 	bl	80007ec <HAL_GetTick>
 800082c:	4602      	mov	r2, r0
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d8f7      	bhi.n	8000828 <HAL_Delay+0x28>
  {
  }
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000008 	.word	0x20000008

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff90 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff49 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff5e 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffb0 	bl	8000960 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e127      	b.n	8000c70 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a20:	2201      	movs	r2, #1
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f040 8116 	bne.w	8000c6a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d034      	beq.n	8000ab0 <HAL_GPIO_Init+0xa4>
 8000a46:	2b12      	cmp	r3, #18
 8000a48:	d80d      	bhi.n	8000a66 <HAL_GPIO_Init+0x5a>
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d02b      	beq.n	8000aa6 <HAL_GPIO_Init+0x9a>
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d804      	bhi.n	8000a5c <HAL_GPIO_Init+0x50>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d031      	beq.n	8000aba <HAL_GPIO_Init+0xae>
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d01c      	beq.n	8000a94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a5a:	e048      	b.n	8000aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d043      	beq.n	8000ae8 <HAL_GPIO_Init+0xdc>
 8000a60:	2b11      	cmp	r3, #17
 8000a62:	d01b      	beq.n	8000a9c <HAL_GPIO_Init+0x90>
          break;
 8000a64:	e043      	b.n	8000aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a66:	4a89      	ldr	r2, [pc, #548]	; (8000c8c <HAL_GPIO_Init+0x280>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d026      	beq.n	8000aba <HAL_GPIO_Init+0xae>
 8000a6c:	4a87      	ldr	r2, [pc, #540]	; (8000c8c <HAL_GPIO_Init+0x280>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d806      	bhi.n	8000a80 <HAL_GPIO_Init+0x74>
 8000a72:	4a87      	ldr	r2, [pc, #540]	; (8000c90 <HAL_GPIO_Init+0x284>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d020      	beq.n	8000aba <HAL_GPIO_Init+0xae>
 8000a78:	4a86      	ldr	r2, [pc, #536]	; (8000c94 <HAL_GPIO_Init+0x288>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d01d      	beq.n	8000aba <HAL_GPIO_Init+0xae>
          break;
 8000a7e:	e036      	b.n	8000aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a80:	4a85      	ldr	r2, [pc, #532]	; (8000c98 <HAL_GPIO_Init+0x28c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d019      	beq.n	8000aba <HAL_GPIO_Init+0xae>
 8000a86:	4a85      	ldr	r2, [pc, #532]	; (8000c9c <HAL_GPIO_Init+0x290>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d016      	beq.n	8000aba <HAL_GPIO_Init+0xae>
 8000a8c:	4a84      	ldr	r2, [pc, #528]	; (8000ca0 <HAL_GPIO_Init+0x294>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0xae>
          break;
 8000a92:	e02c      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e028      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e023      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	3308      	adds	r3, #8
 8000aac:	623b      	str	r3, [r7, #32]
          break;
 8000aae:	e01e      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e019      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e012      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d105      	bne.n	8000adc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	611a      	str	r2, [r3, #16]
          break;
 8000ada:	e008      	b.n	8000aee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	615a      	str	r2, [r3, #20]
          break;
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	2bff      	cmp	r3, #255	; 0xff
 8000af2:	d801      	bhi.n	8000af8 <HAL_GPIO_Init+0xec>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	e001      	b.n	8000afc <HAL_GPIO_Init+0xf0>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3304      	adds	r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	2bff      	cmp	r3, #255	; 0xff
 8000b02:	d802      	bhi.n	8000b0a <HAL_GPIO_Init+0xfe>
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x104>
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	3b08      	subs	r3, #8
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	210f      	movs	r1, #15
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	401a      	ands	r2, r3
 8000b22:	6a39      	ldr	r1, [r7, #32]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f000 8096 	beq.w	8000c6a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3e:	4b59      	ldr	r3, [pc, #356]	; (8000ca4 <HAL_GPIO_Init+0x298>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a58      	ldr	r2, [pc, #352]	; (8000ca4 <HAL_GPIO_Init+0x298>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6193      	str	r3, [r2, #24]
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <HAL_GPIO_Init+0x298>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b56:	4a54      	ldr	r2, [pc, #336]	; (8000ca8 <HAL_GPIO_Init+0x29c>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a4b      	ldr	r2, [pc, #300]	; (8000cac <HAL_GPIO_Init+0x2a0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d013      	beq.n	8000baa <HAL_GPIO_Init+0x19e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a4a      	ldr	r2, [pc, #296]	; (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d00d      	beq.n	8000ba6 <HAL_GPIO_Init+0x19a>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a49      	ldr	r2, [pc, #292]	; (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d007      	beq.n	8000ba2 <HAL_GPIO_Init+0x196>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a48      	ldr	r2, [pc, #288]	; (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_GPIO_Init+0x192>
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x1a0>
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	e004      	b.n	8000bac <HAL_GPIO_Init+0x1a0>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x1a0>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_GPIO_Init+0x1a0>
 8000baa:	2300      	movs	r3, #0
 8000bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bae:	f002 0203 	and.w	r2, r2, #3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bbc:	493a      	ldr	r1, [pc, #232]	; (8000ca8 <HAL_GPIO_Init+0x29c>)
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd6:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4938      	ldr	r1, [pc, #224]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4933      	ldr	r1, [pc, #204]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	492e      	ldr	r1, [pc, #184]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	604b      	str	r3, [r1, #4]
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4929      	ldr	r1, [pc, #164]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4924      	ldr	r1, [pc, #144]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	608b      	str	r3, [r1, #8]
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	491f      	ldr	r1, [pc, #124]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	491a      	ldr	r1, [pc, #104]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60cb      	str	r3, [r1, #12]
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4915      	ldr	r1, [pc, #84]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f47f aed0 	bne.w	8000a20 <HAL_GPIO_Init+0x14>
  }
}
 8000c80:	bf00      	nop
 8000c82:	372c      	adds	r7, #44	; 0x2c
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	10210000 	.word	0x10210000
 8000c90:	10110000 	.word	0x10110000
 8000c94:	10120000 	.word	0x10120000
 8000c98:	10310000 	.word	0x10310000
 8000c9c:	10320000 	.word	0x10320000
 8000ca0:	10220000 	.word	0x10220000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e001      	b.n	8000ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	807b      	strh	r3, [r7, #2]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfe:	787b      	ldrb	r3, [r7, #1]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d0a:	e003      	b.n	8000d14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	041a      	lsls	r2, r3, #16
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	611a      	str	r2, [r3, #16]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d30:	887a      	ldrh	r2, [r7, #2]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4013      	ands	r3, r2
 8000d36:	041a      	lsls	r2, r3, #16
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	400b      	ands	r3, r1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e11f      	b.n	8000fa2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff faa2 	bl	80002c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2224      	movs	r2, #36	; 0x24
 8000d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0201 	bic.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000db4:	f001 f90e 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8000db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a7b      	ldr	r2, [pc, #492]	; (8000fac <HAL_I2C_Init+0x25c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d807      	bhi.n	8000dd4 <HAL_I2C_Init+0x84>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <HAL_I2C_Init+0x260>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	bf94      	ite	ls
 8000dcc:	2301      	movls	r3, #1
 8000dce:	2300      	movhi	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	e006      	b.n	8000de2 <HAL_I2C_Init+0x92>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4a77      	ldr	r2, [pc, #476]	; (8000fb4 <HAL_I2C_Init+0x264>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	bf94      	ite	ls
 8000ddc:	2301      	movls	r3, #1
 8000dde:	2300      	movhi	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0db      	b.n	8000fa2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4a72      	ldr	r2, [pc, #456]	; (8000fb8 <HAL_I2C_Init+0x268>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0c9b      	lsrs	r3, r3, #18
 8000df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4a64      	ldr	r2, [pc, #400]	; (8000fac <HAL_I2C_Init+0x25c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d802      	bhi.n	8000e24 <HAL_I2C_Init+0xd4>
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3301      	adds	r3, #1
 8000e22:	e009      	b.n	8000e38 <HAL_I2C_Init+0xe8>
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	4a63      	ldr	r2, [pc, #396]	; (8000fbc <HAL_I2C_Init+0x26c>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	099b      	lsrs	r3, r3, #6
 8000e36:	3301      	adds	r3, #1
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4956      	ldr	r1, [pc, #344]	; (8000fac <HAL_I2C_Init+0x25c>)
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d80d      	bhi.n	8000e74 <HAL_I2C_Init+0x124>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	1e59      	subs	r1, r3, #1
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	bf38      	it	cc
 8000e70:	2304      	movcc	r3, #4
 8000e72:	e04f      	b.n	8000f14 <HAL_I2C_Init+0x1c4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <HAL_I2C_Init+0x150>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1e58      	subs	r0, r3, #1
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6859      	ldr	r1, [r3, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	440b      	add	r3, r1
 8000e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e012      	b.n	8000ec6 <HAL_I2C_Init+0x176>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6859      	ldr	r1, [r3, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	0099      	lsls	r1, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_I2C_Init+0x17e>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e022      	b.n	8000f14 <HAL_I2C_Init+0x1c4>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_I2C_Init+0x1a4>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1e58      	subs	r0, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6859      	ldr	r1, [r3, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	440b      	add	r3, r1
 8000ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef2:	e00f      	b.n	8000f14 <HAL_I2C_Init+0x1c4>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1e58      	subs	r0, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	0099      	lsls	r1, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	6809      	ldr	r1, [r1, #0]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69da      	ldr	r2, [r3, #28]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6911      	ldr	r1, [r2, #16]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68d2      	ldr	r2, [r2, #12]
 8000f4e:	4311      	orrs	r1, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	000186a0 	.word	0x000186a0
 8000fb0:	001e847f 	.word	0x001e847f
 8000fb4:	003d08ff 	.word	0x003d08ff
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	10624dd3 	.word	0x10624dd3

08000fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	817b      	strh	r3, [r7, #10]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff fc0a 	bl	80007ec <HAL_GetTick>
 8000fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	f040 80e0 	bne.w	80011a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2319      	movs	r3, #25
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4970      	ldr	r1, [pc, #448]	; (80011b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 fa92 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ffe:	2302      	movs	r3, #2
 8001000:	e0d3      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_I2C_Master_Transmit+0x50>
 800100c:	2302      	movs	r3, #2
 800100e:	e0cc      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d007      	beq.n	8001036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 0201 	orr.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2221      	movs	r2, #33	; 0x21
 800104a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2210      	movs	r2, #16
 8001052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	893a      	ldrh	r2, [r7, #8]
 8001066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106c:	b29a      	uxth	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001078:	8979      	ldrh	r1, [r7, #10]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	6a3a      	ldr	r2, [r7, #32]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f9ca 	bl	8001418 <I2C_MasterRequestWrite>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e08d      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010a4:	e066      	b.n	8001174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	6a39      	ldr	r1, [r7, #32]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 fb0c 	bl	80016c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d107      	bne.n	80010ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e06b      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b04      	cmp	r3, #4
 800110e:	d11b      	bne.n	8001148 <HAL_I2C_Master_Transmit+0x188>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001114:	2b00      	cmp	r3, #0
 8001116:	d017      	beq.n	8001148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	6a39      	ldr	r1, [r7, #32]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fafc 	bl	800174a <I2C_WaitOnBTFFlagUntilTimeout>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00d      	beq.n	8001174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	2b04      	cmp	r3, #4
 800115e:	d107      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800116e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e01a      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001178:	2b00      	cmp	r3, #0
 800117a:	d194      	bne.n	80010a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2220      	movs	r2, #32
 8001190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011a8:	2302      	movs	r3, #2
  }
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	00100002 	.word	0x00100002
 80011b8:	ffff0000 	.word	0xffff0000

080011bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	460b      	mov	r3, r1
 80011ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff fb0e 	bl	80007ec <HAL_GetTick>
 80011d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b20      	cmp	r3, #32
 80011e0:	f040 8111 	bne.w	8001406 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2319      	movs	r3, #25
 80011ea:	2201      	movs	r2, #1
 80011ec:	4988      	ldr	r1, [pc, #544]	; (8001410 <HAL_I2C_IsDeviceReady+0x254>)
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 f994 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e104      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_I2C_IsDeviceReady+0x50>
 8001208:	2302      	movs	r3, #2
 800120a:	e0fd      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b01      	cmp	r3, #1
 8001220:	d007      	beq.n	8001232 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0201 	orr.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001240:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2224      	movs	r2, #36	; 0x24
 8001246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a70      	ldr	r2, [pc, #448]	; (8001414 <HAL_I2C_IsDeviceReady+0x258>)
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001264:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2200      	movs	r2, #0
 800126e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f952 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00d      	beq.n	800129a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800128c:	d103      	bne.n	8001296 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e0b6      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800129a:	897b      	ldrh	r3, [r7, #10]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80012a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fa9f 	bl	80007ec <HAL_GetTick>
 80012ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	bf0c      	ite	eq
 80012be:	2301      	moveq	r3, #1
 80012c0:	2300      	movne	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	2300      	movne	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80012de:	e025      	b.n	800132c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012e0:	f7ff fa84 	bl	80007ec <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d302      	bcc.n	80012f6 <HAL_I2C_IsDeviceReady+0x13a>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	22a0      	movs	r2, #160	; 0xa0
 80012fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b02      	cmp	r3, #2
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2ba0      	cmp	r3, #160	; 0xa0
 8001336:	d005      	beq.n	8001344 <HAL_I2C_IsDeviceReady+0x188>
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_I2C_IsDeviceReady+0x188>
 800133e:	7dbb      	ldrb	r3, [r7, #22]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0cd      	beq.n	80012e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2220      	movs	r2, #32
 8001348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d129      	bne.n	80013ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001368:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2319      	movs	r3, #25
 8001386:	2201      	movs	r2, #1
 8001388:	4921      	ldr	r1, [pc, #132]	; (8001410 <HAL_I2C_IsDeviceReady+0x254>)
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f8c6 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e036      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e02c      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2319      	movs	r3, #25
 80013ce:	2201      	movs	r2, #1
 80013d0:	490f      	ldr	r1, [pc, #60]	; (8001410 <HAL_I2C_IsDeviceReady+0x254>)
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f8a2 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e012      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f4ff af32 	bcc.w	8001256 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001406:	2302      	movs	r3, #2
  }
}
 8001408:	4618      	mov	r0, r3
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	00100002 	.word	0x00100002
 8001414:	ffff0000 	.word	0xffff0000

08001418 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	460b      	mov	r3, r1
 8001426:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d006      	beq.n	8001442 <I2C_MasterRequestWrite+0x2a>
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d003      	beq.n	8001442 <I2C_MasterRequestWrite+0x2a>
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001440:	d108      	bne.n	8001454 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e00b      	b.n	800146c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	2b12      	cmp	r3, #18
 800145a:	d107      	bne.n	800146c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800146a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f84f 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00d      	beq.n	80014a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001492:	d103      	bne.n	800149c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e035      	b.n	800150c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a8:	d108      	bne.n	80014bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	e01b      	b.n	80014f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	11db      	asrs	r3, r3, #7
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0306 	and.w	r3, r3, #6
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f063 030f 	orn	r3, r3, #15
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <I2C_MasterRequestWrite+0xfc>)
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f875 	bl	80015ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e010      	b.n	800150c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <I2C_MasterRequestWrite+0x100>)
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f865 	bl	80015ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	00010008 	.word	0x00010008
 8001518:	00010002 	.word	0x00010002

0800151c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800152c:	e025      	b.n	800157a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d021      	beq.n	800157a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001536:	f7ff f959 	bl	80007ec <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d302      	bcc.n	800154c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d116      	bne.n	800157a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f043 0220 	orr.w	r2, r3, #32
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e023      	b.n	80015c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10d      	bne.n	80015a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4013      	ands	r3, r2
 8001590:	b29b      	uxth	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf0c      	ite	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	2300      	movne	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	e00c      	b.n	80015ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4013      	ands	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d0b6      	beq.n	800152e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015d8:	e051      	b.n	800167e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e8:	d123      	bne.n	8001632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001602:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f043 0204 	orr.w	r2, r3, #4
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e046      	b.n	80016c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d021      	beq.n	800167e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163a:	f7ff f8d7 	bl	80007ec <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	d302      	bcc.n	8001650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d116      	bne.n	800167e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f043 0220 	orr.w	r2, r3, #32
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e020      	b.n	80016c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	0c1b      	lsrs	r3, r3, #16
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10c      	bne.n	80016a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4013      	ands	r3, r2
 8001694:	b29b      	uxth	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	e00b      	b.n	80016ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	43da      	mvns	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4013      	ands	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf14      	ite	ne
 80016b4:	2301      	movne	r3, #1
 80016b6:	2300      	moveq	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d18d      	bne.n	80015da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016d4:	e02d      	b.n	8001732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f878 	bl	80017cc <I2C_IsAcknowledgeFailed>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e02d      	b.n	8001742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d021      	beq.n	8001732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ee:	f7ff f87d 	bl	80007ec <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d302      	bcc.n	8001704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d116      	bne.n	8001732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f043 0220 	orr.w	r2, r3, #32
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e007      	b.n	8001742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173c:	2b80      	cmp	r3, #128	; 0x80
 800173e:	d1ca      	bne.n	80016d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001756:	e02d      	b.n	80017b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f837 	bl	80017cc <I2C_IsAcknowledgeFailed>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e02d      	b.n	80017c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176e:	d021      	beq.n	80017b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001770:	f7ff f83c 	bl	80007ec <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	429a      	cmp	r2, r3
 800177e:	d302      	bcc.n	8001786 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e007      	b.n	80017c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d1ca      	bne.n	8001758 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d11b      	bne.n	800181c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f043 0204 	orr.w	r2, r3, #4
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e26c      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8087 	beq.w	8001956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b04      	cmp	r3, #4
 8001852:	d00c      	beq.n	800186e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001854:	4b8f      	ldr	r3, [pc, #572]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d112      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d10b      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06c      	beq.n	8001954 <HAL_RCC_OscConfig+0x12c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d168      	bne.n	8001954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e246      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x76>
 8001890:	4b80      	ldr	r3, [pc, #512]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a7f      	ldr	r2, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e02e      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x98>
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7a      	ldr	r2, [pc, #488]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a77      	ldr	r2, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0xbc>
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a71      	ldr	r2, [pc, #452]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018e4:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6a      	ldr	r2, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a67      	ldr	r2, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7fe ff72 	bl	80007ec <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7fe ff6e 	bl	80007ec <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1fa      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xe4>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7fe ff5e 	bl	80007ec <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7fe ff5a 	bl	80007ec <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1e6      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x10c>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
 800197a:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1ba      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4939      	ldr	r1, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7fe ff13 	bl	80007ec <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7fe ff0f 	bl	80007ec <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e19b      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4927      	ldr	r1, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7fe fef2 	bl	80007ec <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7fe feee 	bl	80007ec <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e17a      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d03a      	beq.n	8001aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7fe fed2 	bl	80007ec <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7fe fece 	bl	80007ec <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e15a      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f000 fac6 	bl	8001ffc <RCC_Delay>
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7fe feb8 	bl	80007ec <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7fe feb4 	bl	80007ec <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d908      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e140      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	42420000 	.word	0x42420000
 8001a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e9      	bne.n	8001a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a6 	beq.w	8001c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b97      	ldr	r3, [pc, #604]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b94      	ldr	r3, [pc, #592]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a93      	ldr	r2, [pc, #588]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b91      	ldr	r3, [pc, #580]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7fe fe75 	bl	80007ec <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7fe fe71 	bl	80007ec <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0fd      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x312>
 8001b2c:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e02d      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x334>
 8001b42:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a75      	ldr	r2, [pc, #468]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a72      	ldr	r2, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	e01c      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d10c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x356>
 8001b64:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a6c      	ldr	r2, [pc, #432]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e00b      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d015      	beq.n	8001bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe fe25 	bl	80007ec <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe fe21 	bl	80007ec <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0ab      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ee      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x37e>
 8001bc8:	e014      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7fe fe0f 	bl	80007ec <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7fe fe0b 	bl	80007ec <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e095      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8081 	beq.w	8001d12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d061      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d146      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe fddf 	bl	80007ec <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe fddb 	bl	80007ec <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e067      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	492d      	ldr	r1, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a19      	ldr	r1, [r3, #32]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fdaf 	bl	80007ec <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe fdab 	bl	80007ec <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e037      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46a>
 8001cb0:	e02f      	b.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe fd98 	bl	80007ec <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe fd94 	bl	80007ec <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e020      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x498>
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e013      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42420060 	.word	0x42420060

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d0      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4965      	ldr	r1, [pc, #404]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d040      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e073      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06b      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7fe fce8 	bl	80007ec <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7fe fce4 	bl	80007ec <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e053      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d210      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4601      	mov	r1, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
 8001eca:	fa21 f303 	lsr.w	r3, r1, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fc46 	bl	8000768 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08003248 	.word	0x08003248
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b490      	push	{r4, r7}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f04:	1d3c      	adds	r4, r7, #4
 8001f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d002      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x40>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x46>
 8001f3a:	e02d      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3e:	623b      	str	r3, [r7, #32]
      break;
 8001f40:	e02d      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	0c9b      	lsrs	r3, r3, #18
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4e:	4413      	add	r3, r2
 8001f50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	0c5b      	lsrs	r3, r3, #17
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f6e:	4413      	add	r3, r2
 8001f70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f7a:	fb02 f203 	mul.w	r2, r2, r3
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e004      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	623b      	str	r3, [r7, #32]
      break;
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f9a:	623b      	str	r3, [r7, #32]
      break;
 8001f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc90      	pop	{r4, r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	08003214 	.word	0x08003214
 8001fb0:	08003224 	.word	0x08003224
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	007a1200 	.word	0x007a1200
 8001fbc:	003d0900 	.word	0x003d0900

08001fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff2 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4601      	mov	r1, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003258 	.word	0x08003258

08001ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <RCC_Delay+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <RCC_Delay+0x38>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002018:	bf00      	nop
  }
  while (Delay --);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <RCC_Delay+0x1c>
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000000 	.word	0x20000000
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <LCD_WriteCommand>:
 extern "C" {
#endif

							/* INLINE FUNCTION DEFINITIONS */

inline void LCD_WriteCommand(LCD_t const * const lcd_ptr, uint8_t command){
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]

	return (*lcd_ptr->lcd_vptr->LCD_WriteCommand)(lcd_ptr, command);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4611      	mov	r1, r2
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
}
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LCD_Write>:

inline void LCD_Write(LCD_t const * const lcd_ptr, uint8_t data){
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]

	return (*lcd_ptr->lcd_vptr->LCD_Write)(lcd_ptr, data);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4611      	mov	r1, r2
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
}
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <LCD_PrintString>:

inline void LCD_PrintString(LCD_t const * const lcd_ptr, const char * str){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]

	return (*lcd_ptr->lcd_vptr->LCD_PrintString)(lcd_ptr, str);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
}
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <LCD_PrintNumber>:

inline void LCD_PrintNumber(LCD_t const * const lcd_ptr, const int x, const uint8_t base){
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	71fb      	strb	r3, [r7, #7]

	return (*lcd_ptr->lcd_vptr->LCD_PrintNumber)(lcd_ptr, x, base);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	79fa      	ldrb	r2, [r7, #7]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	4798      	blx	r3
}
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <LCD_PrintChar>:

inline void LCD_PrintChar(LCD_t const * const lcd_ptr, const uint8_t chr){
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]

	return (*lcd_ptr->lcd_vptr->LCD_PrintChar)(lcd_ptr, chr);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	4611      	mov	r1, r2
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
}
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <LCD_GoTo>:

inline void LCD_GoTo(LCD_t const * const lcd_ptr, const uint8_t row, const uint8_t column){
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
 80020e2:	4613      	mov	r3, r2
 80020e4:	70bb      	strb	r3, [r7, #2]

	return (*lcd_ptr->lcd_vptr->LCD_GoTo)(lcd_ptr, row, column);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	78ba      	ldrb	r2, [r7, #2]
 80020ee:	78f9      	ldrb	r1, [r7, #3]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
}
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <LCD_DefChar>:

inline void LCD_DefChar(LCD_t const * const lcd_ptr, const uint8_t num, const uint8_t * udg_num){
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	460b      	mov	r3, r1
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	72fb      	strb	r3, [r7, #11]

	return (*lcd_ptr->lcd_vptr->LCD_DefChar)(lcd_ptr, num, udg_num);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	7af9      	ldrb	r1, [r7, #11]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	4798      	blx	r3
}
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <LCD_ReturnHome>:

inline void LCD_ReturnHome(LCD_t const * const lcd_ptr){
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

	return (*lcd_ptr->lcd_vptr->LCD_ReturnHome)(lcd_ptr);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
}
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <LCD_Clear>:

inline void LCD_Clear(LCD_t const * const lcd_ptr){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

	return (*lcd_ptr->lcd_vptr->LCD_Clear)(lcd_ptr);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
}
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <LCD_Constructor>:

void LCD_Constructor(LCD_t * const lcd_ptr){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
			&LCD_DefChar,
			&LCD_ReturnHome,
			&LCD_Clear
	};

	lcd_ptr->lcd_vptr = &vtbl;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <LCD_Constructor+0x18>)
 8002158:	601a      	str	r2, [r3, #0]

}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	08003260 	.word	0x08003260

08002168 <LCD_GPIO_PulseEnable>:

#ifdef __cplusplus
 extern "C" {
#endif

static inline void LCD_GPIO_PulseEnable(LCD_t const * const lcd_ptr, uint8_t flag){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]

	LCD_GPIO_t const * const lcd_ptr_ = (LCD_GPIO_t const *)lcd_ptr;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	60fb      	str	r3, [r7, #12]

		if(flag){
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <LCD_GPIO_PulseEnable+0x2c>

			HAL_GPIO_TogglePin(lcd_ptr_->ports.en_port, lcd_ptr_->pins.en_pin);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7fe fdc8 	bl	8000d1e <HAL_GPIO_TogglePin>

			HAL_Delay(0.05); // 50 microsecond
 800218e:	2000      	movs	r0, #0
 8002190:	f7fe fb36 	bl	8000800 <HAL_Delay>
		}

	HAL_GPIO_TogglePin(lcd_ptr_->ports.en_port, lcd_ptr_->pins.en_pin);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f7fe fdbd 	bl	8000d1e <HAL_GPIO_TogglePin>

		if(!flag)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <LCD_GPIO_PulseEnable+0x48>
			HAL_Delay(0.05); // 50 microsecond
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe fb28 	bl	8000800 <HAL_Delay>

}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <LCD_GPIO_Write>:

static void LCD_GPIO_Write(LCD_t const * const lcd_ptr, uint8_t data){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]

	LCD_GPIO_t const * const lcd_ptr_ = (LCD_GPIO_t const *)lcd_ptr;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(lcd_ptr_->ports.rw_port, lcd_ptr_->pins.rw_pin, LCD_WRITE_PIN_STATE);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	6898      	ldr	r0, [r3, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021d0:	2200      	movs	r2, #0
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fd8b 	bl	8000cee <HAL_GPIO_WritePin>

		#endif

		#ifdef LCD_GPIO_8BIT_MODE

			for( int i = 0; i < 8; i++){
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e019      	b.n	8002212 <LCD_GPIO_Write+0x5a>

				HAL_GPIO_WritePin(lcd_ptr_->ports.data_ports[i], lcd_ptr_->pins.data_pins[i] , ((data >> i) & 0x01));
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3302      	adds	r3, #2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	6898      	ldr	r0, [r3, #8]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3318      	adds	r3, #24
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	88d9      	ldrh	r1, [r3, #6]
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	fa42 f303 	asr.w	r3, r2, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	f7fe fd71 	bl	8000cee <HAL_GPIO_WritePin>
			for( int i = 0; i < 8; i++){
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b07      	cmp	r3, #7
 8002216:	dde2      	ble.n	80021de <LCD_GPIO_Write+0x26>

			}

		LCD_GPIO_PulseEnable(lcd_ptr, 1);
 8002218:	2101      	movs	r1, #1
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa4 	bl	8002168 <LCD_GPIO_PulseEnable>

		#endif

}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <LCD_GPIO_CheckBusy>:


static uint8_t LCD_GPIO_CheckBusy(LCD_t const * const lcd_ptr){
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

	LCD_GPIO_t const * const lcd_ptr_ = (LCD_GPIO_t const *)lcd_ptr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_WritePin(lcd_ptr_->ports.rw_port, lcd_ptr_->pins.rw_pin, LCD_READ_PIN_STATE);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800223c:	2201      	movs	r2, #1
 800223e:	4619      	mov	r1, r3
 8002240:	f7fe fd55 	bl	8000cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_ptr_->ports.rs_port, lcd_ptr_->pins.rs_pin, LCD_IR_PIN_STATE);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6858      	ldr	r0, [r3, #4]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fd4d 	bl	8000cee <HAL_GPIO_WritePin>

	GPIO_InitTypeDef GPIO_InitStruct1;

	GPIO_InitStruct1.Pin = LCD_D7_Pin;
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct1.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct1.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct1.Speed = GPIO_SPEED_MEDIUM;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	4619      	mov	r1, r3
 800226a:	4817      	ldr	r0, [pc, #92]	; (80022c8 <LCD_GPIO_CheckBusy+0xa0>)
 800226c:	f7fe fbce 	bl	8000a0c <HAL_GPIO_Init>

	uint8_t ret = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	77fb      	strb	r3, [r7, #31]
		#endif


		#ifdef LCD_GPIO_8BIT_MODE

			LCD_GPIO_PulseEnable(lcd_ptr, 0);
 8002274:	2100      	movs	r1, #0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff76 	bl	8002168 <LCD_GPIO_PulseEnable>

				if(HAL_GPIO_ReadPin(lcd_ptr_->ports.data_ports[7], lcd_ptr_->pins.data_pins[7]) == GPIO_PIN_SET )
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7fe fd19 	bl	8000cc0 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <LCD_GPIO_CheckBusy+0x72>
					ret = 1;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
 8002298:	e001      	b.n	800229e <LCD_GPIO_CheckBusy+0x76>

				else
					ret = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	77fb      	strb	r3, [r7, #31]

			LCD_GPIO_PulseEnable(lcd_ptr, 0);
 800229e:	2100      	movs	r1, #0
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff61 	bl	8002168 <LCD_GPIO_PulseEnable>

			LCD_GPIO_PulseEnable(lcd_ptr, 1);
 80022a6:	2101      	movs	r1, #1
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff5d 	bl	8002168 <LCD_GPIO_PulseEnable>

		#endif

	GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP ;
 80022ae:	2301      	movs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	4619      	mov	r1, r3
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <LCD_GPIO_CheckBusy+0xa0>)
 80022ba:	f7fe fba7 	bl	8000a0c <HAL_GPIO_Init>

	return (ret);
 80022be:	7ffb      	ldrb	r3, [r7, #31]

}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40010800 	.word	0x40010800

080022cc <LCD_GPIO_WriteCommand>:

static void LCD_GPIO_WriteCommand(LCD_t const * const lcd_ptr, uint8_t command){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]

	LCD_GPIO_t const * const lcd_ptr_ = (LCD_GPIO_t const *)lcd_ptr;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(lcd_ptr_->ports.rs_port, lcd_ptr_->pins.rs_pin, LCD_IR_PIN_STATE);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6858      	ldr	r0, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fd01 	bl	8000cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_ptr_->ports.rw_port, lcd_ptr_->pins.rw_pin, LCD_WRITE_PIN_STATE);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6898      	ldr	r0, [r3, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f4:	2200      	movs	r2, #0
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fcf9 	bl	8000cee <HAL_GPIO_WritePin>

		#endif

		#ifdef LCD_GPIO_8BIT_MODE

			LCD_GPIO_Write(lcd_ptr, command);
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff59 	bl	80021b8 <LCD_GPIO_Write>

			while( LCD_GPIO_CheckBusy(lcd_ptr) );
 8002306:	bf00      	nop
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff8d 	bl	8002228 <LCD_GPIO_CheckBusy>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f9      	bne.n	8002308 <LCD_GPIO_WriteCommand+0x3c>

		#endif

}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <LCD_GPIO_PrintString>:

static void LCD_GPIO_PrintString(LCD_t const * const lcd_ptr, const char * str){
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

	LCD_GPIO_t const * const lcd_ptr_ = (LCD_GPIO_t const *)lcd_ptr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(lcd_ptr_->ports.rs_port, lcd_ptr_->pins.rs_pin, LCD_DR_PIN_STATE);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6858      	ldr	r0, [r3, #4]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002332:	2201      	movs	r2, #1
 8002334:	4619      	mov	r1, r3
 8002336:	f7fe fcda 	bl	8000cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_ptr_->ports.rw_port, lcd_ptr_->pins.rw_pin, LCD_WRITE_PIN_STATE);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6898      	ldr	r0, [r3, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fcd2 	bl	8000cee <HAL_GPIO_WritePin>

			}

		#else

			for( int i = 0; i < strlen(str); i++){
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e019      	b.n	8002384 <LCD_GPIO_PrintString+0x68>

				HAL_GPIO_WritePin(lcd_ptr_->ports.rs_port, lcd_ptr_->pins.rs_pin, LCD_DR_PIN_STATE);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6858      	ldr	r0, [r3, #4]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002358:	2201      	movs	r2, #1
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fcc7 	bl	8000cee <HAL_GPIO_WritePin>

				LCD_GPIO_Write(lcd_ptr, str[i]);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff24 	bl	80021b8 <LCD_GPIO_Write>

				while( LCD_GPIO_CheckBusy(lcd_ptr) );
 8002370:	bf00      	nop
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff58 	bl	8002228 <LCD_GPIO_CheckBusy>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <LCD_GPIO_PrintString+0x56>
			for( int i = 0; i < strlen(str); i++){
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3301      	adds	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f7fd fee1 	bl	800014c <strlen>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d8de      	bhi.n	8002350 <LCD_GPIO_PrintString+0x34>

			}

		#endif

}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <LCD_GPIO_PrintNumber>:

static void LCD_GPIO_PrintNumber(LCD_t const * const lcd_ptr, const int x, const uint8_t base){
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	71fb      	strb	r3, [r7, #7]

	char buffer[12];

		if( base == BASE_DECIMAL )
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b0a      	cmp	r3, #10
 80023ae:	d107      	bne.n	80023c0 <LCD_GPIO_PrintNumber+0x24>
			sprintf(buffer, "%d", x);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	4912      	ldr	r1, [pc, #72]	; (8002400 <LCD_GPIO_PrintNumber+0x64>)
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fae5 	bl	8002988 <siprintf>
 80023be:	e014      	b.n	80023ea <LCD_GPIO_PrintNumber+0x4e>

		else if( base == BASE_HEX )
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d107      	bne.n	80023d6 <LCD_GPIO_PrintNumber+0x3a>
			sprintf(buffer, "%X", x);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	490d      	ldr	r1, [pc, #52]	; (8002404 <LCD_GPIO_PrintNumber+0x68>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fada 	bl	8002988 <siprintf>
 80023d4:	e009      	b.n	80023ea <LCD_GPIO_PrintNumber+0x4e>

		else if( base == BASE_OCTAL )
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d106      	bne.n	80023ea <LCD_GPIO_PrintNumber+0x4e>
			sprintf(buffer, "%o", x);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4909      	ldr	r1, [pc, #36]	; (8002408 <LCD_GPIO_PrintNumber+0x6c>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 facf 	bl	8002988 <siprintf>

	LCD_GPIO_PrintString(lcd_ptr, buffer);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff ff93 	bl	800231c <LCD_GPIO_PrintString>

}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08003228 	.word	0x08003228
 8002404:	0800322c 	.word	0x0800322c
 8002408:	08003230 	.word	0x08003230

0800240c <LCD_GPIO_PrintChar>:

static void LCD_GPIO_PrintChar(LCD_t const * const lcd_ptr, const uint8_t chr){
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]

	LCD_GPIO_t const * const lcd_ptr_ = (LCD_GPIO_t const *)lcd_ptr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(lcd_ptr_->ports.rs_port, lcd_ptr_->pins.rs_pin, LCD_DR_PIN_STATE);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6858      	ldr	r0, [r3, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002424:	2201      	movs	r2, #1
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fc61 	bl	8000cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_ptr_->ports.rw_port, lcd_ptr_->pins.rw_pin, LCD_WRITE_PIN_STATE);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6898      	ldr	r0, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	f7fe fc59 	bl	8000cee <HAL_GPIO_WritePin>

		#endif

		#ifdef LCD_GPIO_8BIT_MODE

			LCD_GPIO_Write(lcd_ptr, chr);
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff feb9 	bl	80021b8 <LCD_GPIO_Write>

			while( LCD_GPIO_CheckBusy(lcd_ptr) );
 8002446:	bf00      	nop
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff feed 	bl	8002228 <LCD_GPIO_CheckBusy>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <LCD_GPIO_PrintChar+0x3c>

		#endif

}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <LCD_GPIO_GoTo>:


static void LCD_GPIO_GoTo(LCD_t const * const lcd_ptr, const uint8_t row, const uint8_t column){
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
 8002468:	4613      	mov	r3, r2
 800246a:	70bb      	strb	r3, [r7, #2]

	const uint8_t LCD_16[] = {0x00, 0x40, 0x10, 0x50};
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <LCD_GPIO_GoTo+0x3c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]

	assert_param(row < 4);
	assert_param(column <= 20);

		#ifdef LCD16
			LCD_GPIO_WriteCommand(lcd_ptr, LCD_SET_DDRAM_ADDR + LCD_16[row] + column);
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f107 0210 	add.w	r2, r7, #16
 8002478:	4413      	add	r3, r2
 800247a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800247e:	78bb      	ldrb	r3, [r7, #2]
 8002480:	4413      	add	r3, r2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3b80      	subs	r3, #128	; 0x80
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff1e 	bl	80022cc <LCD_GPIO_WriteCommand>

		#ifdef LCD20
			LCD_GPIO_WriteCommand(lcd_ptr, LCD_SET_DDRAM_ADDR + LCD_20[row] + column);

		#endif
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	08003234 	.word	0x08003234

0800249c <LCD_GPIO_DefChar>:


static void LCD_GPIO_DefChar(LCD_t const * const lcd_ptr, const uint8_t num, const uint8_t * udg_num){
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	460b      	mov	r3, r1
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	72fb      	strb	r3, [r7, #11]

	assert_param(num < 8);

	LCD_GPIO_WriteCommand(lcd_ptr, LCD_SET_CGRAM_ADDR | ((num & 0x07) * 8));
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff ff02 	bl	80022cc <LCD_GPIO_WriteCommand>

		for( int i = 0; i < 8; i++ )
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e00a      	b.n	80024e4 <LCD_GPIO_DefChar+0x48>
			LCD_GPIO_Write(lcd_ptr, udg_num[i]);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7ff fe6d 	bl	80021b8 <LCD_GPIO_Write>
		for( int i = 0; i < 8; i++ )
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b07      	cmp	r3, #7
 80024e8:	ddf1      	ble.n	80024ce <LCD_GPIO_DefChar+0x32>


}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <LCD_GPIO_ReturnHome>:

static inline void LCD_GPIO_ReturnHome(LCD_t const * const lcd_ptr){
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

	LCD_GPIO_WriteCommand(lcd_ptr, (uint8_t)LCD_RETURN);
 80024fa:	2102      	movs	r1, #2
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fee5 	bl	80022cc <LCD_GPIO_WriteCommand>

}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <LCD_GPIO_Clear>:

static inline void LCD_GPIO_Clear(LCD_t const * const lcd_ptr){
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]

	LCD_GPIO_WriteCommand(lcd_ptr, (uint8_t)LCD_CLEAR);
 8002512:	2101      	movs	r1, #1
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fed9 	bl	80022cc <LCD_GPIO_WriteCommand>

}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <LCD_GPIO_Constructor>:


void LCD_GPIO_Constructor(LCD_GPIO_t * const lcd_ptr, LCD_GPIO_Ports_t ports, LCD_GPIO_Pins_t pins){
 8002524:	b084      	sub	sp, #16
 8002526:	b5b0      	push	{r4, r5, r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	f107 001c 	add.w	r0, r7, #28
 8002532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			&LCD_GPIO_DefChar,
			&LCD_GPIO_ReturnHome,
			&LCD_GPIO_Clear
	};

	LCD_Constructor(&lcd_ptr->super);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fe07 	bl	800214c <LCD_Constructor>

	lcd_ptr->super.lcd_vptr = &vtbl;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <LCD_GPIO_Constructor+0x90>)
 8002542:	601a      	str	r2, [r3, #0]
	lcd_ptr->ports = ports;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1d1c      	adds	r4, r3, #4
 8002548:	f107 051c 	add.w	r5, r7, #28
 800254c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	lcd_ptr->pins = pins;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002562:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8002566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800256e:	6020      	str	r0, [r4, #0]
 8002570:	3404      	adds	r4, #4
 8002572:	8021      	strh	r1, [r4, #0]


	LCD_GPIO_WriteCommand(&lcd_ptr->super, FUNC_SET_BASE_CFG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2138      	movs	r1, #56	; 0x38
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fea7 	bl	80022cc <LCD_GPIO_WriteCommand>
	LCD_GPIO_WriteCommand(&lcd_ptr->super, LCD_ENTRYMODESET_CFG);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2106      	movs	r1, #6
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fea2 	bl	80022cc <LCD_GPIO_WriteCommand>
	LCD_GPIO_WriteCommand(&lcd_ptr->super, LCD_DISPLAYCONTROL_CFG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	210c      	movs	r1, #12
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe9d 	bl	80022cc <LCD_GPIO_WriteCommand>
	LCD_GPIO_WriteCommand(&lcd_ptr->super, LCD_CUR_SHIFT_CFG);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2114      	movs	r1, #20
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fe98 	bl	80022cc <LCD_GPIO_WriteCommand>

	LCD_GPIO_Clear(&lcd_ptr->super);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ffb3 	bl	800250a <LCD_GPIO_Clear>

}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025ae:	b004      	add	sp, #16
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	08003284 	.word	0x08003284

080025b8 <LCD_I2C_WriteCommand>:
#ifdef __cplusplus
 extern "C" {
#endif


static void LCD_I2C_WriteCommand(LCD_t const * const lcd_ptr, uint8_t command){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]

	LCD_I2C_t const * const lcd_ptr_ = (LCD_I2C_t const *)lcd_ptr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	617b      	str	r3, [r7, #20]

	uint8_t cmd_arr[4];

	uint8_t cmd_L, cmd_H;

	while(((HAL_StatusTypeDef)HAL_I2C_IsDeviceReady( lcd_ptr_->i2c_handle, lcd_ptr_->slave_address, 1, HAL_MAX_DELAY)) != HAL_OK);
 80025c8:	bf00      	nop
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	6858      	ldr	r0, [r3, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	8919      	ldrh	r1, [r3, #8]
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	2201      	movs	r2, #1
 80025d8:	f7fe fdf0 	bl	80011bc <HAL_I2C_IsDeviceReady>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f3      	bne.n	80025ca <LCD_I2C_WriteCommand+0x12>

		cmd_L = ((command<<4) & 0xF0);
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	74fb      	strb	r3, [r7, #19]
		cmd_H = (command & 0xF0);
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	74bb      	strb	r3, [r7, #18]

		cmd_arr[0] =  LCD_BIT_EN | (cmd_H);
 80025f0:	7cbb      	ldrb	r3, [r7, #18]
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	733b      	strb	r3, [r7, #12]
		cmd_arr[1] =  LCD_BACKLIGHT_ON | (cmd_H);
 80025fa:	7cbb      	ldrb	r3, [r7, #18]
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	b2db      	uxtb	r3, r3
 8002602:	737b      	strb	r3, [r7, #13]
		cmd_arr[2] =  LCD_BIT_EN | (cmd_L);
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	b2db      	uxtb	r3, r3
 800260c:	73bb      	strb	r3, [r7, #14]
		cmd_arr[3] =  LCD_BACKLIGHT_ON | (cmd_L);
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	b2db      	uxtb	r3, r3
 8002616:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit( lcd_ptr_->i2c_handle, lcd_ptr_->slave_address, (uint8_t *)cmd_arr, sizeof cmd_arr, HAL_MAX_DELAY );
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6858      	ldr	r0, [r3, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	8919      	ldrh	r1, [r3, #8]
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	f04f 33ff 	mov.w	r3, #4294967295
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2304      	movs	r3, #4
 800262c:	f7fe fcc8 	bl	8000fc0 <HAL_I2C_Master_Transmit>

}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <LCD_I2C_Write>:


static void LCD_I2C_Write(LCD_t const * const lcd_ptr, uint8_t data){
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]


	LCD_I2C_t const * const lcd_ptr_ = (LCD_I2C_t const *)lcd_ptr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	617b      	str	r3, [r7, #20]

	uint8_t data_arr[4];

	uint8_t data_L, data_H;

	while(((HAL_StatusTypeDef)HAL_I2C_IsDeviceReady( lcd_ptr_->i2c_handle, lcd_ptr_->slave_address, 1, HAL_MAX_DELAY)) != HAL_OK);
 8002648:	bf00      	nop
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6858      	ldr	r0, [r3, #4]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	8919      	ldrh	r1, [r3, #8]
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	2201      	movs	r2, #1
 8002658:	f7fe fdb0 	bl	80011bc <HAL_I2C_IsDeviceReady>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f3      	bne.n	800264a <LCD_I2C_Write+0x12>

		data_L = ((data<<4) & 0xF0);
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	74fb      	strb	r3, [r7, #19]
		data_H = (data & 0xF0);
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f023 030f 	bic.w	r3, r3, #15
 800266e:	74bb      	strb	r3, [r7, #18]

		data_arr[0] = LCD_BIT_RS | LCD_BIT_EN | (data_H);
 8002670:	7cbb      	ldrb	r3, [r7, #18]
 8002672:	f043 0305 	orr.w	r3, r3, #5
 8002676:	b2db      	uxtb	r3, r3
 8002678:	733b      	strb	r3, [r7, #12]
		data_arr[1] = LCD_BIT_RS | LCD_BACKLIGHT_ON | (data_H);
 800267a:	7cbb      	ldrb	r3, [r7, #18]
 800267c:	f043 0309 	orr.w	r3, r3, #9
 8002680:	b2db      	uxtb	r3, r3
 8002682:	737b      	strb	r3, [r7, #13]
		data_arr[2] = LCD_BIT_RS | LCD_BIT_EN | (data_L);
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	f043 0305 	orr.w	r3, r3, #5
 800268a:	b2db      	uxtb	r3, r3
 800268c:	73bb      	strb	r3, [r7, #14]
		data_arr[3] = LCD_BIT_RS | LCD_BACKLIGHT_ON | (data_L);
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	f043 0309 	orr.w	r3, r3, #9
 8002694:	b2db      	uxtb	r3, r3
 8002696:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit( lcd_ptr_->i2c_handle, lcd_ptr_->slave_address, (uint8_t *)data_arr, sizeof data_arr, HAL_MAX_DELAY );
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	6858      	ldr	r0, [r3, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	8919      	ldrh	r1, [r3, #8]
 80026a0:	f107 020c 	add.w	r2, r7, #12
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2304      	movs	r3, #4
 80026ac:	f7fe fc88 	bl	8000fc0 <HAL_I2C_Master_Transmit>

}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <LCD_I2C_PrintString>:


static inline void LCD_I2C_PrintString(LCD_t const * const lcd_ptr, const char * str){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]

	for( int i = 0; i < strlen(str); i++ ){
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e00a      	b.n	80026de <LCD_I2C_PrintString+0x26>

			LCD_I2C_Write(lcd_ptr, str[i]);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffb0 	bl	8002638 <LCD_I2C_Write>
	for( int i = 0; i < strlen(str); i++ ){
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f7fd fd34 	bl	800014c <strlen>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8ed      	bhi.n	80026c8 <LCD_I2C_PrintString+0x10>
	}

}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <LCD_I2C_PrintNumber>:


static void LCD_I2C_PrintNumber(LCD_t const * const lcd_ptr, const int x, const uint8_t base){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	71fb      	strb	r3, [r7, #7]

	char buffer[12];

		if( base == BASE_DECIMAL )
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b0a      	cmp	r3, #10
 8002706:	d107      	bne.n	8002718 <LCD_I2C_PrintNumber+0x24>
			sprintf(buffer, "%d", x);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	4912      	ldr	r1, [pc, #72]	; (8002758 <LCD_I2C_PrintNumber+0x64>)
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f939 	bl	8002988 <siprintf>
 8002716:	e014      	b.n	8002742 <LCD_I2C_PrintNumber+0x4e>

		else if( base == BASE_HEX )
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b10      	cmp	r3, #16
 800271c:	d107      	bne.n	800272e <LCD_I2C_PrintNumber+0x3a>
			sprintf(buffer, "%X", x);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	490d      	ldr	r1, [pc, #52]	; (800275c <LCD_I2C_PrintNumber+0x68>)
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f92e 	bl	8002988 <siprintf>
 800272c:	e009      	b.n	8002742 <LCD_I2C_PrintNumber+0x4e>

		else if( base == BASE_OCTAL )
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d106      	bne.n	8002742 <LCD_I2C_PrintNumber+0x4e>
			sprintf(buffer, "%o", x);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	4909      	ldr	r1, [pc, #36]	; (8002760 <LCD_I2C_PrintNumber+0x6c>)
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f923 	bl	8002988 <siprintf>

	LCD_I2C_PrintString(lcd_ptr, buffer);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ffb5 	bl	80026b8 <LCD_I2C_PrintString>

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	08003238 	.word	0x08003238
 800275c:	0800323c 	.word	0x0800323c
 8002760:	08003240 	.word	0x08003240

08002764 <LCD_I2C_PrintChar>:


static inline void LCD_I2C_PrintChar(LCD_t const * const lcd_ptr, const uint8_t chr){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]

	LCD_I2C_Write(lcd_ptr, chr);
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff5f 	bl	8002638 <LCD_I2C_Write>

}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <LCD_I2C_GoTo>:

static void LCD_I2C_GoTo(LCD_t const * const lcd_ptr, const uint8_t row, const uint8_t column){
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
 8002790:	4613      	mov	r3, r2
 8002792:	70bb      	strb	r3, [r7, #2]

	const uint8_t LCD_16[] = {0x00, 0x40, 0x10, 0x50};
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <LCD_I2C_GoTo+0x3c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
	assert_param(row < 4);
	assert_param(column <= 20);

		#ifdef LCD16

			LCD_I2C_WriteCommand(lcd_ptr, LCD_SET_DDRAM_ADDR + LCD_16[row] + column);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f107 0210 	add.w	r2, r7, #16
 80027a0:	4413      	add	r3, r2
 80027a2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80027a6:	78bb      	ldrb	r3, [r7, #2]
 80027a8:	4413      	add	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3b80      	subs	r3, #128	; 0x80
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4619      	mov	r1, r3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ff00 	bl	80025b8 <LCD_I2C_WriteCommand>

			LCD_I2C_WriteCommand(lcd_ptr, LCD_SET_DDRAM_ADDR + LCD_20[row] + column);

		#endif

}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	08003244 	.word	0x08003244

080027c4 <LCD_I2C_DefChar>:

static void LCD_I2C_DefChar(LCD_t const * const lcd_ptr, const uint8_t num, const uint8_t * udg_num){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	460b      	mov	r3, r1
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	72fb      	strb	r3, [r7, #11]

	assert_param(num < 8);

	LCD_I2C_WriteCommand(lcd_ptr, LCD_SET_CGRAM_ADDR | ((num & 0x07) * 8));
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff fee4 	bl	80025b8 <LCD_I2C_WriteCommand>

		for( int i = 0; i < 8; i++ )
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e00a      	b.n	800280c <LCD_I2C_DefChar+0x48>
			LCD_I2C_Write(lcd_ptr, udg_num[i]);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff19 	bl	8002638 <LCD_I2C_Write>
		for( int i = 0; i < 8; i++ )
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b07      	cmp	r3, #7
 8002810:	ddf1      	ble.n	80027f6 <LCD_I2C_DefChar+0x32>


}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <LCD_I2C_ReturnHome>:

static inline void LCD_I2C_ReturnHome(LCD_t const * const lcd_ptr){
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]

	LCD_I2C_WriteCommand(lcd_ptr, (uint8_t)LCD_RETURN);
 8002822:	2102      	movs	r1, #2
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff fec7 	bl	80025b8 <LCD_I2C_WriteCommand>

}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <LCD_I2C_Clear>:


static inline void LCD_I2C_Clear(LCD_t const * const lcd_ptr){
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]

	LCD_I2C_WriteCommand(lcd_ptr, (uint8_t)LCD_CLEAR);
 800283a:	2101      	movs	r1, #1
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff febb 	bl	80025b8 <LCD_I2C_WriteCommand>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <LCD_I2C_Constructor>:


void LCD_I2C_Constructor(LCD_I2C_t * const lcd_ptr, I2C_HandleTypeDef * i2c_handle, const uint16_t slave_address){
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
			&LCD_I2C_DefChar,
			&LCD_I2C_ReturnHome,
			&LCD_I2C_Clear
	};

	LCD_Constructor(&lcd_ptr->super);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fc75 	bl	800214c <LCD_Constructor>

	lcd_ptr->super.lcd_vptr = &vtbl;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <LCD_I2C_Constructor+0xd4>)
 8002866:	601a      	str	r2, [r3, #0]
	lcd_ptr->i2c_handle = i2c_handle;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	605a      	str	r2, [r3, #4]
	lcd_ptr->slave_address = slave_address;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	811a      	strh	r2, [r3, #8]

	/* Initialization Process of the LCD referring to its datasheet */

	HAL_Delay(50);  // wait for >40ms
 8002874:	2032      	movs	r0, #50	; 0x32
 8002876:	f7fd ffc3 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, 0x30);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2130      	movs	r1, #48	; 0x30
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fe9a 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(5);  // wait for >4.1ms
 8002884:	2005      	movs	r0, #5
 8002886:	f7fd ffbb 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, 0x30);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2130      	movs	r1, #48	; 0x30
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe92 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(1);  // wait for >100us
 8002894:	2001      	movs	r0, #1
 8002896:	f7fd ffb3 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, 0x30);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2130      	movs	r1, #48	; 0x30
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fe8a 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(10);
 80028a4:	200a      	movs	r0, #10
 80028a6:	f7fd ffab 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, 0x20);  // 4bit mode
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2120      	movs	r1, #32
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fe82 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(10);
 80028b4:	200a      	movs	r0, #10
 80028b6:	f7fd ffa3 	bl	8000800 <HAL_Delay>

	/* Configuration setups */
	LCD_I2C_WriteCommand(&lcd_ptr->super, FUNC_I2C_SET_BASE_CFG);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2128      	movs	r1, #40	; 0x28
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe7a 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(1);
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7fd ff9b 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, LCD_I2C_ENTRYMODESET_CFG);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2106      	movs	r1, #6
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fe72 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(1);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fd ff93 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, LCD_I2C_DISPLAYCONTROL_CFG);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	210c      	movs	r1, #12
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fe6a 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(1);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fd ff8b 	bl	8000800 <HAL_Delay>
	LCD_I2C_WriteCommand(&lcd_ptr->super, LCD_I2C_CUR_SHIFT_CFG);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2114      	movs	r1, #20
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fe62 	bl	80025b8 <LCD_I2C_WriteCommand>
	HAL_Delay(1);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7fd ff83 	bl	8000800 <HAL_Delay>

	LCD_I2C_ReturnHome(&lcd_ptr->super);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff8c 	bl	800281a <LCD_I2C_ReturnHome>
	HAL_Delay(1);
 8002902:	2001      	movs	r0, #1
 8002904:	f7fd ff7c 	bl	8000800 <HAL_Delay>
	LCD_I2C_Clear(&lcd_ptr->super);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff91 	bl	8002832 <LCD_I2C_Clear>
	HAL_Delay(1);
 8002910:	2001      	movs	r0, #1
 8002912:	f7fd ff75 	bl	8000800 <HAL_Delay>

}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	080032a8 	.word	0x080032a8

08002924 <__errno>:
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <__errno+0x8>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	2000000c 	.word	0x2000000c

08002930 <__libc_init_array>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	2500      	movs	r5, #0
 8002934:	4e0c      	ldr	r6, [pc, #48]	; (8002968 <__libc_init_array+0x38>)
 8002936:	4c0d      	ldr	r4, [pc, #52]	; (800296c <__libc_init_array+0x3c>)
 8002938:	1ba4      	subs	r4, r4, r6
 800293a:	10a4      	asrs	r4, r4, #2
 800293c:	42a5      	cmp	r5, r4
 800293e:	d109      	bne.n	8002954 <__libc_init_array+0x24>
 8002940:	f000 fc34 	bl	80031ac <_init>
 8002944:	2500      	movs	r5, #0
 8002946:	4e0a      	ldr	r6, [pc, #40]	; (8002970 <__libc_init_array+0x40>)
 8002948:	4c0a      	ldr	r4, [pc, #40]	; (8002974 <__libc_init_array+0x44>)
 800294a:	1ba4      	subs	r4, r4, r6
 800294c:	10a4      	asrs	r4, r4, #2
 800294e:	42a5      	cmp	r5, r4
 8002950:	d105      	bne.n	800295e <__libc_init_array+0x2e>
 8002952:	bd70      	pop	{r4, r5, r6, pc}
 8002954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002958:	4798      	blx	r3
 800295a:	3501      	adds	r5, #1
 800295c:	e7ee      	b.n	800293c <__libc_init_array+0xc>
 800295e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002962:	4798      	blx	r3
 8002964:	3501      	adds	r5, #1
 8002966:	e7f2      	b.n	800294e <__libc_init_array+0x1e>
 8002968:	08003300 	.word	0x08003300
 800296c:	08003300 	.word	0x08003300
 8002970:	08003300 	.word	0x08003300
 8002974:	08003304 	.word	0x08003304

08002978 <memset>:
 8002978:	4603      	mov	r3, r0
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	d100      	bne.n	8002982 <memset+0xa>
 8002980:	4770      	bx	lr
 8002982:	f803 1b01 	strb.w	r1, [r3], #1
 8002986:	e7f9      	b.n	800297c <memset+0x4>

08002988 <siprintf>:
 8002988:	b40e      	push	{r1, r2, r3}
 800298a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800298e:	b500      	push	{lr}
 8002990:	b09c      	sub	sp, #112	; 0x70
 8002992:	ab1d      	add	r3, sp, #116	; 0x74
 8002994:	9002      	str	r0, [sp, #8]
 8002996:	9006      	str	r0, [sp, #24]
 8002998:	9107      	str	r1, [sp, #28]
 800299a:	9104      	str	r1, [sp, #16]
 800299c:	4808      	ldr	r0, [pc, #32]	; (80029c0 <siprintf+0x38>)
 800299e:	4909      	ldr	r1, [pc, #36]	; (80029c4 <siprintf+0x3c>)
 80029a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a4:	9105      	str	r1, [sp, #20]
 80029a6:	6800      	ldr	r0, [r0, #0]
 80029a8:	a902      	add	r1, sp, #8
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	f000 f866 	bl	8002a7c <_svfiprintf_r>
 80029b0:	2200      	movs	r2, #0
 80029b2:	9b02      	ldr	r3, [sp, #8]
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	b01c      	add	sp, #112	; 0x70
 80029b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029bc:	b003      	add	sp, #12
 80029be:	4770      	bx	lr
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	ffff0208 	.word	0xffff0208

080029c8 <__ssputs_r>:
 80029c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	4682      	mov	sl, r0
 80029d0:	429e      	cmp	r6, r3
 80029d2:	460c      	mov	r4, r1
 80029d4:	4690      	mov	r8, r2
 80029d6:	4699      	mov	r9, r3
 80029d8:	d837      	bhi.n	8002a4a <__ssputs_r+0x82>
 80029da:	898a      	ldrh	r2, [r1, #12]
 80029dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029e0:	d031      	beq.n	8002a46 <__ssputs_r+0x7e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	6825      	ldr	r5, [r4, #0]
 80029e6:	6909      	ldr	r1, [r1, #16]
 80029e8:	1a6f      	subs	r7, r5, r1
 80029ea:	6965      	ldr	r5, [r4, #20]
 80029ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80029f4:	f109 0301 	add.w	r3, r9, #1
 80029f8:	443b      	add	r3, r7
 80029fa:	429d      	cmp	r5, r3
 80029fc:	bf38      	it	cc
 80029fe:	461d      	movcc	r5, r3
 8002a00:	0553      	lsls	r3, r2, #21
 8002a02:	d530      	bpl.n	8002a66 <__ssputs_r+0x9e>
 8002a04:	4629      	mov	r1, r5
 8002a06:	f000 fb37 	bl	8003078 <_malloc_r>
 8002a0a:	4606      	mov	r6, r0
 8002a0c:	b950      	cbnz	r0, 8002a24 <__ssputs_r+0x5c>
 8002a0e:	230c      	movs	r3, #12
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f8ca 3000 	str.w	r3, [sl]
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1e:	81a3      	strh	r3, [r4, #12]
 8002a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a24:	463a      	mov	r2, r7
 8002a26:	6921      	ldr	r1, [r4, #16]
 8002a28:	f000 fab6 	bl	8002f98 <memcpy>
 8002a2c:	89a3      	ldrh	r3, [r4, #12]
 8002a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a36:	81a3      	strh	r3, [r4, #12]
 8002a38:	6126      	str	r6, [r4, #16]
 8002a3a:	443e      	add	r6, r7
 8002a3c:	6026      	str	r6, [r4, #0]
 8002a3e:	464e      	mov	r6, r9
 8002a40:	6165      	str	r5, [r4, #20]
 8002a42:	1bed      	subs	r5, r5, r7
 8002a44:	60a5      	str	r5, [r4, #8]
 8002a46:	454e      	cmp	r6, r9
 8002a48:	d900      	bls.n	8002a4c <__ssputs_r+0x84>
 8002a4a:	464e      	mov	r6, r9
 8002a4c:	4632      	mov	r2, r6
 8002a4e:	4641      	mov	r1, r8
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	f000 faac 	bl	8002fae <memmove>
 8002a56:	68a3      	ldr	r3, [r4, #8]
 8002a58:	2000      	movs	r0, #0
 8002a5a:	1b9b      	subs	r3, r3, r6
 8002a5c:	60a3      	str	r3, [r4, #8]
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	441e      	add	r6, r3
 8002a62:	6026      	str	r6, [r4, #0]
 8002a64:	e7dc      	b.n	8002a20 <__ssputs_r+0x58>
 8002a66:	462a      	mov	r2, r5
 8002a68:	f000 fb60 	bl	800312c <_realloc_r>
 8002a6c:	4606      	mov	r6, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1e2      	bne.n	8002a38 <__ssputs_r+0x70>
 8002a72:	6921      	ldr	r1, [r4, #16]
 8002a74:	4650      	mov	r0, sl
 8002a76:	f000 fab3 	bl	8002fe0 <_free_r>
 8002a7a:	e7c8      	b.n	8002a0e <__ssputs_r+0x46>

08002a7c <_svfiprintf_r>:
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	461d      	mov	r5, r3
 8002a82:	898b      	ldrh	r3, [r1, #12]
 8002a84:	b09d      	sub	sp, #116	; 0x74
 8002a86:	061f      	lsls	r7, r3, #24
 8002a88:	4680      	mov	r8, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	4616      	mov	r6, r2
 8002a8e:	d50f      	bpl.n	8002ab0 <_svfiprintf_r+0x34>
 8002a90:	690b      	ldr	r3, [r1, #16]
 8002a92:	b96b      	cbnz	r3, 8002ab0 <_svfiprintf_r+0x34>
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	f000 faef 	bl	8003078 <_malloc_r>
 8002a9a:	6020      	str	r0, [r4, #0]
 8002a9c:	6120      	str	r0, [r4, #16]
 8002a9e:	b928      	cbnz	r0, 8002aac <_svfiprintf_r+0x30>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	f8c8 3000 	str.w	r3, [r8]
 8002aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aaa:	e0c8      	b.n	8002c3e <_svfiprintf_r+0x1c2>
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	6163      	str	r3, [r4, #20]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aba:	2330      	movs	r3, #48	; 0x30
 8002abc:	f04f 0b01 	mov.w	fp, #1
 8002ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac4:	9503      	str	r5, [sp, #12]
 8002ac6:	4637      	mov	r7, r6
 8002ac8:	463d      	mov	r5, r7
 8002aca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ace:	b10b      	cbz	r3, 8002ad4 <_svfiprintf_r+0x58>
 8002ad0:	2b25      	cmp	r3, #37	; 0x25
 8002ad2:	d13e      	bne.n	8002b52 <_svfiprintf_r+0xd6>
 8002ad4:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ad8:	d00b      	beq.n	8002af2 <_svfiprintf_r+0x76>
 8002ada:	4653      	mov	r3, sl
 8002adc:	4632      	mov	r2, r6
 8002ade:	4621      	mov	r1, r4
 8002ae0:	4640      	mov	r0, r8
 8002ae2:	f7ff ff71 	bl	80029c8 <__ssputs_r>
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	f000 80a4 	beq.w	8002c34 <_svfiprintf_r+0x1b8>
 8002aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aee:	4453      	add	r3, sl
 8002af0:	9309      	str	r3, [sp, #36]	; 0x24
 8002af2:	783b      	ldrb	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 809d 	beq.w	8002c34 <_svfiprintf_r+0x1b8>
 8002afa:	2300      	movs	r3, #0
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b04:	9304      	str	r3, [sp, #16]
 8002b06:	9307      	str	r3, [sp, #28]
 8002b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8002b0e:	462f      	mov	r7, r5
 8002b10:	2205      	movs	r2, #5
 8002b12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b16:	4850      	ldr	r0, [pc, #320]	; (8002c58 <_svfiprintf_r+0x1dc>)
 8002b18:	f000 fa30 	bl	8002f7c <memchr>
 8002b1c:	9b04      	ldr	r3, [sp, #16]
 8002b1e:	b9d0      	cbnz	r0, 8002b56 <_svfiprintf_r+0xda>
 8002b20:	06d9      	lsls	r1, r3, #27
 8002b22:	bf44      	itt	mi
 8002b24:	2220      	movmi	r2, #32
 8002b26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b2a:	071a      	lsls	r2, r3, #28
 8002b2c:	bf44      	itt	mi
 8002b2e:	222b      	movmi	r2, #43	; 0x2b
 8002b30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b34:	782a      	ldrb	r2, [r5, #0]
 8002b36:	2a2a      	cmp	r2, #42	; 0x2a
 8002b38:	d015      	beq.n	8002b66 <_svfiprintf_r+0xea>
 8002b3a:	462f      	mov	r7, r5
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	250a      	movs	r5, #10
 8002b40:	9a07      	ldr	r2, [sp, #28]
 8002b42:	4639      	mov	r1, r7
 8002b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b48:	3b30      	subs	r3, #48	; 0x30
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	d94d      	bls.n	8002bea <_svfiprintf_r+0x16e>
 8002b4e:	b1b8      	cbz	r0, 8002b80 <_svfiprintf_r+0x104>
 8002b50:	e00f      	b.n	8002b72 <_svfiprintf_r+0xf6>
 8002b52:	462f      	mov	r7, r5
 8002b54:	e7b8      	b.n	8002ac8 <_svfiprintf_r+0x4c>
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <_svfiprintf_r+0x1dc>)
 8002b58:	463d      	mov	r5, r7
 8002b5a:	1a80      	subs	r0, r0, r2
 8002b5c:	fa0b f000 	lsl.w	r0, fp, r0
 8002b60:	4318      	orrs	r0, r3
 8002b62:	9004      	str	r0, [sp, #16]
 8002b64:	e7d3      	b.n	8002b0e <_svfiprintf_r+0x92>
 8002b66:	9a03      	ldr	r2, [sp, #12]
 8002b68:	1d11      	adds	r1, r2, #4
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	9103      	str	r1, [sp, #12]
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	db01      	blt.n	8002b76 <_svfiprintf_r+0xfa>
 8002b72:	9207      	str	r2, [sp, #28]
 8002b74:	e004      	b.n	8002b80 <_svfiprintf_r+0x104>
 8002b76:	4252      	negs	r2, r2
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	9207      	str	r2, [sp, #28]
 8002b7e:	9304      	str	r3, [sp, #16]
 8002b80:	783b      	ldrb	r3, [r7, #0]
 8002b82:	2b2e      	cmp	r3, #46	; 0x2e
 8002b84:	d10c      	bne.n	8002ba0 <_svfiprintf_r+0x124>
 8002b86:	787b      	ldrb	r3, [r7, #1]
 8002b88:	2b2a      	cmp	r3, #42	; 0x2a
 8002b8a:	d133      	bne.n	8002bf4 <_svfiprintf_r+0x178>
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	3702      	adds	r7, #2
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	9203      	str	r2, [sp, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bfb8      	it	lt
 8002b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b9e:	9305      	str	r3, [sp, #20]
 8002ba0:	4d2e      	ldr	r5, [pc, #184]	; (8002c5c <_svfiprintf_r+0x1e0>)
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	7839      	ldrb	r1, [r7, #0]
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f000 f9e8 	bl	8002f7c <memchr>
 8002bac:	b138      	cbz	r0, 8002bbe <_svfiprintf_r+0x142>
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	1b40      	subs	r0, r0, r5
 8002bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8002bb6:	9b04      	ldr	r3, [sp, #16]
 8002bb8:	3701      	adds	r7, #1
 8002bba:	4303      	orrs	r3, r0
 8002bbc:	9304      	str	r3, [sp, #16]
 8002bbe:	7839      	ldrb	r1, [r7, #0]
 8002bc0:	2206      	movs	r2, #6
 8002bc2:	4827      	ldr	r0, [pc, #156]	; (8002c60 <_svfiprintf_r+0x1e4>)
 8002bc4:	1c7e      	adds	r6, r7, #1
 8002bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bca:	f000 f9d7 	bl	8002f7c <memchr>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d038      	beq.n	8002c44 <_svfiprintf_r+0x1c8>
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <_svfiprintf_r+0x1e8>)
 8002bd4:	bb13      	cbnz	r3, 8002c1c <_svfiprintf_r+0x1a0>
 8002bd6:	9b03      	ldr	r3, [sp, #12]
 8002bd8:	3307      	adds	r3, #7
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	3308      	adds	r3, #8
 8002be0:	9303      	str	r3, [sp, #12]
 8002be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002be4:	444b      	add	r3, r9
 8002be6:	9309      	str	r3, [sp, #36]	; 0x24
 8002be8:	e76d      	b.n	8002ac6 <_svfiprintf_r+0x4a>
 8002bea:	fb05 3202 	mla	r2, r5, r2, r3
 8002bee:	2001      	movs	r0, #1
 8002bf0:	460f      	mov	r7, r1
 8002bf2:	e7a6      	b.n	8002b42 <_svfiprintf_r+0xc6>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	250a      	movs	r5, #10
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	9305      	str	r3, [sp, #20]
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c04:	3a30      	subs	r2, #48	; 0x30
 8002c06:	2a09      	cmp	r2, #9
 8002c08:	d903      	bls.n	8002c12 <_svfiprintf_r+0x196>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0c8      	beq.n	8002ba0 <_svfiprintf_r+0x124>
 8002c0e:	9105      	str	r1, [sp, #20]
 8002c10:	e7c6      	b.n	8002ba0 <_svfiprintf_r+0x124>
 8002c12:	fb05 2101 	mla	r1, r5, r1, r2
 8002c16:	2301      	movs	r3, #1
 8002c18:	4607      	mov	r7, r0
 8002c1a:	e7f0      	b.n	8002bfe <_svfiprintf_r+0x182>
 8002c1c:	ab03      	add	r3, sp, #12
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4622      	mov	r2, r4
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <_svfiprintf_r+0x1ec>)
 8002c24:	a904      	add	r1, sp, #16
 8002c26:	4640      	mov	r0, r8
 8002c28:	f3af 8000 	nop.w
 8002c2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c30:	4681      	mov	r9, r0
 8002c32:	d1d6      	bne.n	8002be2 <_svfiprintf_r+0x166>
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	065b      	lsls	r3, r3, #25
 8002c38:	f53f af35 	bmi.w	8002aa6 <_svfiprintf_r+0x2a>
 8002c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c3e:	b01d      	add	sp, #116	; 0x74
 8002c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c44:	ab03      	add	r3, sp, #12
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4622      	mov	r2, r4
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <_svfiprintf_r+0x1ec>)
 8002c4c:	a904      	add	r1, sp, #16
 8002c4e:	4640      	mov	r0, r8
 8002c50:	f000 f882 	bl	8002d58 <_printf_i>
 8002c54:	e7ea      	b.n	8002c2c <_svfiprintf_r+0x1b0>
 8002c56:	bf00      	nop
 8002c58:	080032cc 	.word	0x080032cc
 8002c5c:	080032d2 	.word	0x080032d2
 8002c60:	080032d6 	.word	0x080032d6
 8002c64:	00000000 	.word	0x00000000
 8002c68:	080029c9 	.word	0x080029c9

08002c6c <_printf_common>:
 8002c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c70:	4691      	mov	r9, r2
 8002c72:	461f      	mov	r7, r3
 8002c74:	688a      	ldr	r2, [r1, #8]
 8002c76:	690b      	ldr	r3, [r1, #16]
 8002c78:	4606      	mov	r6, r0
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	bfb8      	it	lt
 8002c7e:	4613      	movlt	r3, r2
 8002c80:	f8c9 3000 	str.w	r3, [r9]
 8002c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c88:	460c      	mov	r4, r1
 8002c8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c8e:	b112      	cbz	r2, 8002c96 <_printf_common+0x2a>
 8002c90:	3301      	adds	r3, #1
 8002c92:	f8c9 3000 	str.w	r3, [r9]
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	0699      	lsls	r1, r3, #26
 8002c9a:	bf42      	ittt	mi
 8002c9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ca0:	3302      	addmi	r3, #2
 8002ca2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ca6:	6825      	ldr	r5, [r4, #0]
 8002ca8:	f015 0506 	ands.w	r5, r5, #6
 8002cac:	d107      	bne.n	8002cbe <_printf_common+0x52>
 8002cae:	f104 0a19 	add.w	sl, r4, #25
 8002cb2:	68e3      	ldr	r3, [r4, #12]
 8002cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	42ab      	cmp	r3, r5
 8002cbc:	dc29      	bgt.n	8002d12 <_printf_common+0xa6>
 8002cbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002cc2:	6822      	ldr	r2, [r4, #0]
 8002cc4:	3300      	adds	r3, #0
 8002cc6:	bf18      	it	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	0692      	lsls	r2, r2, #26
 8002ccc:	d42e      	bmi.n	8002d2c <_printf_common+0xc0>
 8002cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cd2:	4639      	mov	r1, r7
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	47c0      	blx	r8
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d021      	beq.n	8002d20 <_printf_common+0xb4>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	68e5      	ldr	r5, [r4, #12]
 8002ce0:	f003 0306 	and.w	r3, r3, #6
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	bf18      	it	ne
 8002ce8:	2500      	movne	r5, #0
 8002cea:	f8d9 2000 	ldr.w	r2, [r9]
 8002cee:	f04f 0900 	mov.w	r9, #0
 8002cf2:	bf08      	it	eq
 8002cf4:	1aad      	subeq	r5, r5, r2
 8002cf6:	68a3      	ldr	r3, [r4, #8]
 8002cf8:	6922      	ldr	r2, [r4, #16]
 8002cfa:	bf08      	it	eq
 8002cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bfc4      	itt	gt
 8002d04:	1a9b      	subgt	r3, r3, r2
 8002d06:	18ed      	addgt	r5, r5, r3
 8002d08:	341a      	adds	r4, #26
 8002d0a:	454d      	cmp	r5, r9
 8002d0c:	d11a      	bne.n	8002d44 <_printf_common+0xd8>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e008      	b.n	8002d24 <_printf_common+0xb8>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4652      	mov	r2, sl
 8002d16:	4639      	mov	r1, r7
 8002d18:	4630      	mov	r0, r6
 8002d1a:	47c0      	blx	r8
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d103      	bne.n	8002d28 <_printf_common+0xbc>
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7c2      	b.n	8002cb2 <_printf_common+0x46>
 8002d2c:	2030      	movs	r0, #48	; 0x30
 8002d2e:	18e1      	adds	r1, r4, r3
 8002d30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d3a:	4422      	add	r2, r4
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d42:	e7c4      	b.n	8002cce <_printf_common+0x62>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4622      	mov	r2, r4
 8002d48:	4639      	mov	r1, r7
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	47c0      	blx	r8
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d0e6      	beq.n	8002d20 <_printf_common+0xb4>
 8002d52:	f109 0901 	add.w	r9, r9, #1
 8002d56:	e7d8      	b.n	8002d0a <_printf_common+0x9e>

08002d58 <_printf_i>:
 8002d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d60:	460c      	mov	r4, r1
 8002d62:	7e09      	ldrb	r1, [r1, #24]
 8002d64:	b085      	sub	sp, #20
 8002d66:	296e      	cmp	r1, #110	; 0x6e
 8002d68:	4617      	mov	r7, r2
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	4698      	mov	r8, r3
 8002d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d70:	f000 80b3 	beq.w	8002eda <_printf_i+0x182>
 8002d74:	d822      	bhi.n	8002dbc <_printf_i+0x64>
 8002d76:	2963      	cmp	r1, #99	; 0x63
 8002d78:	d036      	beq.n	8002de8 <_printf_i+0x90>
 8002d7a:	d80a      	bhi.n	8002d92 <_printf_i+0x3a>
 8002d7c:	2900      	cmp	r1, #0
 8002d7e:	f000 80b9 	beq.w	8002ef4 <_printf_i+0x19c>
 8002d82:	2958      	cmp	r1, #88	; 0x58
 8002d84:	f000 8083 	beq.w	8002e8e <_printf_i+0x136>
 8002d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d90:	e032      	b.n	8002df8 <_printf_i+0xa0>
 8002d92:	2964      	cmp	r1, #100	; 0x64
 8002d94:	d001      	beq.n	8002d9a <_printf_i+0x42>
 8002d96:	2969      	cmp	r1, #105	; 0x69
 8002d98:	d1f6      	bne.n	8002d88 <_printf_i+0x30>
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	6813      	ldr	r3, [r2, #0]
 8002d9e:	0605      	lsls	r5, r0, #24
 8002da0:	f103 0104 	add.w	r1, r3, #4
 8002da4:	d52a      	bpl.n	8002dfc <_printf_i+0xa4>
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	da03      	bge.n	8002db6 <_printf_i+0x5e>
 8002dae:	222d      	movs	r2, #45	; 0x2d
 8002db0:	425b      	negs	r3, r3
 8002db2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002db6:	486f      	ldr	r0, [pc, #444]	; (8002f74 <_printf_i+0x21c>)
 8002db8:	220a      	movs	r2, #10
 8002dba:	e039      	b.n	8002e30 <_printf_i+0xd8>
 8002dbc:	2973      	cmp	r1, #115	; 0x73
 8002dbe:	f000 809d 	beq.w	8002efc <_printf_i+0x1a4>
 8002dc2:	d808      	bhi.n	8002dd6 <_printf_i+0x7e>
 8002dc4:	296f      	cmp	r1, #111	; 0x6f
 8002dc6:	d020      	beq.n	8002e0a <_printf_i+0xb2>
 8002dc8:	2970      	cmp	r1, #112	; 0x70
 8002dca:	d1dd      	bne.n	8002d88 <_printf_i+0x30>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f043 0320 	orr.w	r3, r3, #32
 8002dd2:	6023      	str	r3, [r4, #0]
 8002dd4:	e003      	b.n	8002dde <_printf_i+0x86>
 8002dd6:	2975      	cmp	r1, #117	; 0x75
 8002dd8:	d017      	beq.n	8002e0a <_printf_i+0xb2>
 8002dda:	2978      	cmp	r1, #120	; 0x78
 8002ddc:	d1d4      	bne.n	8002d88 <_printf_i+0x30>
 8002dde:	2378      	movs	r3, #120	; 0x78
 8002de0:	4865      	ldr	r0, [pc, #404]	; (8002f78 <_printf_i+0x220>)
 8002de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002de6:	e055      	b.n	8002e94 <_printf_i+0x13c>
 8002de8:	6813      	ldr	r3, [r2, #0]
 8002dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dee:	1d19      	adds	r1, r3, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6011      	str	r1, [r2, #0]
 8002df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e08c      	b.n	8002f16 <_printf_i+0x1be>
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e02:	6011      	str	r1, [r2, #0]
 8002e04:	bf18      	it	ne
 8002e06:	b21b      	sxthne	r3, r3
 8002e08:	e7cf      	b.n	8002daa <_printf_i+0x52>
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	6825      	ldr	r5, [r4, #0]
 8002e0e:	1d18      	adds	r0, r3, #4
 8002e10:	6010      	str	r0, [r2, #0]
 8002e12:	0628      	lsls	r0, r5, #24
 8002e14:	d501      	bpl.n	8002e1a <_printf_i+0xc2>
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e002      	b.n	8002e20 <_printf_i+0xc8>
 8002e1a:	0668      	lsls	r0, r5, #25
 8002e1c:	d5fb      	bpl.n	8002e16 <_printf_i+0xbe>
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	296f      	cmp	r1, #111	; 0x6f
 8002e22:	bf14      	ite	ne
 8002e24:	220a      	movne	r2, #10
 8002e26:	2208      	moveq	r2, #8
 8002e28:	4852      	ldr	r0, [pc, #328]	; (8002f74 <_printf_i+0x21c>)
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e30:	6865      	ldr	r5, [r4, #4]
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	60a5      	str	r5, [r4, #8]
 8002e36:	f2c0 8095 	blt.w	8002f64 <_printf_i+0x20c>
 8002e3a:	6821      	ldr	r1, [r4, #0]
 8002e3c:	f021 0104 	bic.w	r1, r1, #4
 8002e40:	6021      	str	r1, [r4, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d13d      	bne.n	8002ec2 <_printf_i+0x16a>
 8002e46:	2d00      	cmp	r5, #0
 8002e48:	f040 808e 	bne.w	8002f68 <_printf_i+0x210>
 8002e4c:	4665      	mov	r5, ip
 8002e4e:	2a08      	cmp	r2, #8
 8002e50:	d10b      	bne.n	8002e6a <_printf_i+0x112>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	07db      	lsls	r3, r3, #31
 8002e56:	d508      	bpl.n	8002e6a <_printf_i+0x112>
 8002e58:	6923      	ldr	r3, [r4, #16]
 8002e5a:	6862      	ldr	r2, [r4, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	bfde      	ittt	le
 8002e60:	2330      	movle	r3, #48	; 0x30
 8002e62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e6a:	ebac 0305 	sub.w	r3, ip, r5
 8002e6e:	6123      	str	r3, [r4, #16]
 8002e70:	f8cd 8000 	str.w	r8, [sp]
 8002e74:	463b      	mov	r3, r7
 8002e76:	aa03      	add	r2, sp, #12
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f7ff fef6 	bl	8002c6c <_printf_common>
 8002e80:	3001      	adds	r0, #1
 8002e82:	d14d      	bne.n	8002f20 <_printf_i+0x1c8>
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	b005      	add	sp, #20
 8002e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e8e:	4839      	ldr	r0, [pc, #228]	; (8002f74 <_printf_i+0x21c>)
 8002e90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	1d1d      	adds	r5, r3, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6015      	str	r5, [r2, #0]
 8002e9e:	060a      	lsls	r2, r1, #24
 8002ea0:	d50b      	bpl.n	8002eba <_printf_i+0x162>
 8002ea2:	07ca      	lsls	r2, r1, #31
 8002ea4:	bf44      	itt	mi
 8002ea6:	f041 0120 	orrmi.w	r1, r1, #32
 8002eaa:	6021      	strmi	r1, [r4, #0]
 8002eac:	b91b      	cbnz	r3, 8002eb6 <_printf_i+0x15e>
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	f022 0220 	bic.w	r2, r2, #32
 8002eb4:	6022      	str	r2, [r4, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	e7b7      	b.n	8002e2a <_printf_i+0xd2>
 8002eba:	064d      	lsls	r5, r1, #25
 8002ebc:	bf48      	it	mi
 8002ebe:	b29b      	uxthmi	r3, r3
 8002ec0:	e7ef      	b.n	8002ea2 <_printf_i+0x14a>
 8002ec2:	4665      	mov	r5, ip
 8002ec4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ec8:	fb02 3311 	mls	r3, r2, r1, r3
 8002ecc:	5cc3      	ldrb	r3, [r0, r3]
 8002ece:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d1f5      	bne.n	8002ec4 <_printf_i+0x16c>
 8002ed8:	e7b9      	b.n	8002e4e <_printf_i+0xf6>
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	6825      	ldr	r5, [r4, #0]
 8002ede:	1d18      	adds	r0, r3, #4
 8002ee0:	6961      	ldr	r1, [r4, #20]
 8002ee2:	6010      	str	r0, [r2, #0]
 8002ee4:	0628      	lsls	r0, r5, #24
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	d501      	bpl.n	8002eee <_printf_i+0x196>
 8002eea:	6019      	str	r1, [r3, #0]
 8002eec:	e002      	b.n	8002ef4 <_printf_i+0x19c>
 8002eee:	066a      	lsls	r2, r5, #25
 8002ef0:	d5fb      	bpl.n	8002eea <_printf_i+0x192>
 8002ef2:	8019      	strh	r1, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	4665      	mov	r5, ip
 8002ef8:	6123      	str	r3, [r4, #16]
 8002efa:	e7b9      	b.n	8002e70 <_printf_i+0x118>
 8002efc:	6813      	ldr	r3, [r2, #0]
 8002efe:	1d19      	adds	r1, r3, #4
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	681d      	ldr	r5, [r3, #0]
 8002f04:	6862      	ldr	r2, [r4, #4]
 8002f06:	2100      	movs	r1, #0
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 f837 	bl	8002f7c <memchr>
 8002f0e:	b108      	cbz	r0, 8002f14 <_printf_i+0x1bc>
 8002f10:	1b40      	subs	r0, r0, r5
 8002f12:	6060      	str	r0, [r4, #4]
 8002f14:	6863      	ldr	r3, [r4, #4]
 8002f16:	6123      	str	r3, [r4, #16]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f1e:	e7a7      	b.n	8002e70 <_printf_i+0x118>
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	462a      	mov	r2, r5
 8002f24:	4639      	mov	r1, r7
 8002f26:	4630      	mov	r0, r6
 8002f28:	47c0      	blx	r8
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d0aa      	beq.n	8002e84 <_printf_i+0x12c>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	079b      	lsls	r3, r3, #30
 8002f32:	d413      	bmi.n	8002f5c <_printf_i+0x204>
 8002f34:	68e0      	ldr	r0, [r4, #12]
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	bfb8      	it	lt
 8002f3c:	4618      	movlt	r0, r3
 8002f3e:	e7a3      	b.n	8002e88 <_printf_i+0x130>
 8002f40:	2301      	movs	r3, #1
 8002f42:	464a      	mov	r2, r9
 8002f44:	4639      	mov	r1, r7
 8002f46:	4630      	mov	r0, r6
 8002f48:	47c0      	blx	r8
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d09a      	beq.n	8002e84 <_printf_i+0x12c>
 8002f4e:	3501      	adds	r5, #1
 8002f50:	68e3      	ldr	r3, [r4, #12]
 8002f52:	9a03      	ldr	r2, [sp, #12]
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	42ab      	cmp	r3, r5
 8002f58:	dcf2      	bgt.n	8002f40 <_printf_i+0x1e8>
 8002f5a:	e7eb      	b.n	8002f34 <_printf_i+0x1dc>
 8002f5c:	2500      	movs	r5, #0
 8002f5e:	f104 0919 	add.w	r9, r4, #25
 8002f62:	e7f5      	b.n	8002f50 <_printf_i+0x1f8>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ac      	bne.n	8002ec2 <_printf_i+0x16a>
 8002f68:	7803      	ldrb	r3, [r0, #0]
 8002f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f72:	e76c      	b.n	8002e4e <_printf_i+0xf6>
 8002f74:	080032dd 	.word	0x080032dd
 8002f78:	080032ee 	.word	0x080032ee

08002f7c <memchr>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	b2c9      	uxtb	r1, r1
 8002f80:	4402      	add	r2, r0
 8002f82:	4290      	cmp	r0, r2
 8002f84:	4603      	mov	r3, r0
 8002f86:	d101      	bne.n	8002f8c <memchr+0x10>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e003      	b.n	8002f94 <memchr+0x18>
 8002f8c:	781c      	ldrb	r4, [r3, #0]
 8002f8e:	3001      	adds	r0, #1
 8002f90:	428c      	cmp	r4, r1
 8002f92:	d1f6      	bne.n	8002f82 <memchr+0x6>
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <memcpy>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	1e43      	subs	r3, r0, #1
 8002f9c:	440a      	add	r2, r1
 8002f9e:	4291      	cmp	r1, r2
 8002fa0:	d100      	bne.n	8002fa4 <memcpy+0xc>
 8002fa2:	bd10      	pop	{r4, pc}
 8002fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fac:	e7f7      	b.n	8002f9e <memcpy+0x6>

08002fae <memmove>:
 8002fae:	4288      	cmp	r0, r1
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	eb01 0302 	add.w	r3, r1, r2
 8002fb6:	d807      	bhi.n	8002fc8 <memmove+0x1a>
 8002fb8:	1e42      	subs	r2, r0, #1
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d00a      	beq.n	8002fd4 <memmove+0x26>
 8002fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fc2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002fc6:	e7f8      	b.n	8002fba <memmove+0xc>
 8002fc8:	4283      	cmp	r3, r0
 8002fca:	d9f5      	bls.n	8002fb8 <memmove+0xa>
 8002fcc:	1881      	adds	r1, r0, r2
 8002fce:	1ad2      	subs	r2, r2, r3
 8002fd0:	42d3      	cmn	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memmove+0x28>
 8002fd4:	bd10      	pop	{r4, pc}
 8002fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fda:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002fde:	e7f7      	b.n	8002fd0 <memmove+0x22>

08002fe0 <_free_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4605      	mov	r5, r0
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	d043      	beq.n	8003070 <_free_r+0x90>
 8002fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fec:	1f0c      	subs	r4, r1, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bfb8      	it	lt
 8002ff2:	18e4      	addlt	r4, r4, r3
 8002ff4:	f000 f8d0 	bl	8003198 <__malloc_lock>
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <_free_r+0x94>)
 8002ffa:	6813      	ldr	r3, [r2, #0]
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	b933      	cbnz	r3, 800300e <_free_r+0x2e>
 8003000:	6063      	str	r3, [r4, #4]
 8003002:	6014      	str	r4, [r2, #0]
 8003004:	4628      	mov	r0, r5
 8003006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800300a:	f000 b8c6 	b.w	800319a <__malloc_unlock>
 800300e:	42a3      	cmp	r3, r4
 8003010:	d90b      	bls.n	800302a <_free_r+0x4a>
 8003012:	6821      	ldr	r1, [r4, #0]
 8003014:	1862      	adds	r2, r4, r1
 8003016:	4293      	cmp	r3, r2
 8003018:	bf01      	itttt	eq
 800301a:	681a      	ldreq	r2, [r3, #0]
 800301c:	685b      	ldreq	r3, [r3, #4]
 800301e:	1852      	addeq	r2, r2, r1
 8003020:	6022      	streq	r2, [r4, #0]
 8003022:	6063      	str	r3, [r4, #4]
 8003024:	6004      	str	r4, [r0, #0]
 8003026:	e7ed      	b.n	8003004 <_free_r+0x24>
 8003028:	4613      	mov	r3, r2
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	b10a      	cbz	r2, 8003032 <_free_r+0x52>
 800302e:	42a2      	cmp	r2, r4
 8003030:	d9fa      	bls.n	8003028 <_free_r+0x48>
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	1858      	adds	r0, r3, r1
 8003036:	42a0      	cmp	r0, r4
 8003038:	d10b      	bne.n	8003052 <_free_r+0x72>
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	4401      	add	r1, r0
 800303e:	1858      	adds	r0, r3, r1
 8003040:	4282      	cmp	r2, r0
 8003042:	6019      	str	r1, [r3, #0]
 8003044:	d1de      	bne.n	8003004 <_free_r+0x24>
 8003046:	6810      	ldr	r0, [r2, #0]
 8003048:	6852      	ldr	r2, [r2, #4]
 800304a:	4401      	add	r1, r0
 800304c:	6019      	str	r1, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	e7d8      	b.n	8003004 <_free_r+0x24>
 8003052:	d902      	bls.n	800305a <_free_r+0x7a>
 8003054:	230c      	movs	r3, #12
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	e7d4      	b.n	8003004 <_free_r+0x24>
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	1821      	adds	r1, r4, r0
 800305e:	428a      	cmp	r2, r1
 8003060:	bf01      	itttt	eq
 8003062:	6811      	ldreq	r1, [r2, #0]
 8003064:	6852      	ldreq	r2, [r2, #4]
 8003066:	1809      	addeq	r1, r1, r0
 8003068:	6021      	streq	r1, [r4, #0]
 800306a:	6062      	str	r2, [r4, #4]
 800306c:	605c      	str	r4, [r3, #4]
 800306e:	e7c9      	b.n	8003004 <_free_r+0x24>
 8003070:	bd38      	pop	{r3, r4, r5, pc}
 8003072:	bf00      	nop
 8003074:	20000090 	.word	0x20000090

08003078 <_malloc_r>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	1ccd      	adds	r5, r1, #3
 800307c:	f025 0503 	bic.w	r5, r5, #3
 8003080:	3508      	adds	r5, #8
 8003082:	2d0c      	cmp	r5, #12
 8003084:	bf38      	it	cc
 8003086:	250c      	movcc	r5, #12
 8003088:	2d00      	cmp	r5, #0
 800308a:	4606      	mov	r6, r0
 800308c:	db01      	blt.n	8003092 <_malloc_r+0x1a>
 800308e:	42a9      	cmp	r1, r5
 8003090:	d903      	bls.n	800309a <_malloc_r+0x22>
 8003092:	230c      	movs	r3, #12
 8003094:	6033      	str	r3, [r6, #0]
 8003096:	2000      	movs	r0, #0
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	f000 f87d 	bl	8003198 <__malloc_lock>
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <_malloc_r+0xac>)
 80030a0:	6814      	ldr	r4, [r2, #0]
 80030a2:	4621      	mov	r1, r4
 80030a4:	b991      	cbnz	r1, 80030cc <_malloc_r+0x54>
 80030a6:	4c20      	ldr	r4, [pc, #128]	; (8003128 <_malloc_r+0xb0>)
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	b91b      	cbnz	r3, 80030b4 <_malloc_r+0x3c>
 80030ac:	4630      	mov	r0, r6
 80030ae:	f000 f863 	bl	8003178 <_sbrk_r>
 80030b2:	6020      	str	r0, [r4, #0]
 80030b4:	4629      	mov	r1, r5
 80030b6:	4630      	mov	r0, r6
 80030b8:	f000 f85e 	bl	8003178 <_sbrk_r>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d124      	bne.n	800310a <_malloc_r+0x92>
 80030c0:	230c      	movs	r3, #12
 80030c2:	4630      	mov	r0, r6
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	f000 f868 	bl	800319a <__malloc_unlock>
 80030ca:	e7e4      	b.n	8003096 <_malloc_r+0x1e>
 80030cc:	680b      	ldr	r3, [r1, #0]
 80030ce:	1b5b      	subs	r3, r3, r5
 80030d0:	d418      	bmi.n	8003104 <_malloc_r+0x8c>
 80030d2:	2b0b      	cmp	r3, #11
 80030d4:	d90f      	bls.n	80030f6 <_malloc_r+0x7e>
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	18cc      	adds	r4, r1, r3
 80030da:	50cd      	str	r5, [r1, r3]
 80030dc:	4630      	mov	r0, r6
 80030de:	f000 f85c 	bl	800319a <__malloc_unlock>
 80030e2:	f104 000b 	add.w	r0, r4, #11
 80030e6:	1d23      	adds	r3, r4, #4
 80030e8:	f020 0007 	bic.w	r0, r0, #7
 80030ec:	1ac3      	subs	r3, r0, r3
 80030ee:	d0d3      	beq.n	8003098 <_malloc_r+0x20>
 80030f0:	425a      	negs	r2, r3
 80030f2:	50e2      	str	r2, [r4, r3]
 80030f4:	e7d0      	b.n	8003098 <_malloc_r+0x20>
 80030f6:	684b      	ldr	r3, [r1, #4]
 80030f8:	428c      	cmp	r4, r1
 80030fa:	bf16      	itet	ne
 80030fc:	6063      	strne	r3, [r4, #4]
 80030fe:	6013      	streq	r3, [r2, #0]
 8003100:	460c      	movne	r4, r1
 8003102:	e7eb      	b.n	80030dc <_malloc_r+0x64>
 8003104:	460c      	mov	r4, r1
 8003106:	6849      	ldr	r1, [r1, #4]
 8003108:	e7cc      	b.n	80030a4 <_malloc_r+0x2c>
 800310a:	1cc4      	adds	r4, r0, #3
 800310c:	f024 0403 	bic.w	r4, r4, #3
 8003110:	42a0      	cmp	r0, r4
 8003112:	d005      	beq.n	8003120 <_malloc_r+0xa8>
 8003114:	1a21      	subs	r1, r4, r0
 8003116:	4630      	mov	r0, r6
 8003118:	f000 f82e 	bl	8003178 <_sbrk_r>
 800311c:	3001      	adds	r0, #1
 800311e:	d0cf      	beq.n	80030c0 <_malloc_r+0x48>
 8003120:	6025      	str	r5, [r4, #0]
 8003122:	e7db      	b.n	80030dc <_malloc_r+0x64>
 8003124:	20000090 	.word	0x20000090
 8003128:	20000094 	.word	0x20000094

0800312c <_realloc_r>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	4607      	mov	r7, r0
 8003130:	4614      	mov	r4, r2
 8003132:	460e      	mov	r6, r1
 8003134:	b921      	cbnz	r1, 8003140 <_realloc_r+0x14>
 8003136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800313a:	4611      	mov	r1, r2
 800313c:	f7ff bf9c 	b.w	8003078 <_malloc_r>
 8003140:	b922      	cbnz	r2, 800314c <_realloc_r+0x20>
 8003142:	f7ff ff4d 	bl	8002fe0 <_free_r>
 8003146:	4625      	mov	r5, r4
 8003148:	4628      	mov	r0, r5
 800314a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800314c:	f000 f826 	bl	800319c <_malloc_usable_size_r>
 8003150:	42a0      	cmp	r0, r4
 8003152:	d20f      	bcs.n	8003174 <_realloc_r+0x48>
 8003154:	4621      	mov	r1, r4
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff ff8e 	bl	8003078 <_malloc_r>
 800315c:	4605      	mov	r5, r0
 800315e:	2800      	cmp	r0, #0
 8003160:	d0f2      	beq.n	8003148 <_realloc_r+0x1c>
 8003162:	4631      	mov	r1, r6
 8003164:	4622      	mov	r2, r4
 8003166:	f7ff ff17 	bl	8002f98 <memcpy>
 800316a:	4631      	mov	r1, r6
 800316c:	4638      	mov	r0, r7
 800316e:	f7ff ff37 	bl	8002fe0 <_free_r>
 8003172:	e7e9      	b.n	8003148 <_realloc_r+0x1c>
 8003174:	4635      	mov	r5, r6
 8003176:	e7e7      	b.n	8003148 <_realloc_r+0x1c>

08003178 <_sbrk_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	2300      	movs	r3, #0
 800317c:	4c05      	ldr	r4, [pc, #20]	; (8003194 <_sbrk_r+0x1c>)
 800317e:	4605      	mov	r5, r0
 8003180:	4608      	mov	r0, r1
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	f7fd fa78 	bl	8000678 <_sbrk>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_sbrk_r+0x1a>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	b103      	cbz	r3, 8003192 <_sbrk_r+0x1a>
 8003190:	602b      	str	r3, [r5, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	200000f0 	.word	0x200000f0

08003198 <__malloc_lock>:
 8003198:	4770      	bx	lr

0800319a <__malloc_unlock>:
 800319a:	4770      	bx	lr

0800319c <_malloc_usable_size_r>:
 800319c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a0:	1f18      	subs	r0, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfbc      	itt	lt
 80031a6:	580b      	ldrlt	r3, [r1, r0]
 80031a8:	18c0      	addlt	r0, r0, r3
 80031aa:	4770      	bx	lr

080031ac <_init>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr

080031b8 <_fini>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr
